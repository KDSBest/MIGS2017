<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.ServiceFabric.Services.Remoting</name>
    </assembly>
    <members>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase">
            <summary>
            The base class used by remoting code generator to generate the proxy for the remoted interfaces.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.#ctor">
            <summary>
            Initializes a new instance of the ProxyBase class.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.Invoke(System.Int32,System.Int32,System.Object)">
            <summary>
            Called by the generated proxy class to send the message to the remote object.
            </summary>
            <param name="interfaceId">Id of the remote interface.</param>
            <param name="methodId">Id of the remote method to be invokved.</param>
            <param name="requestMsgBodyValue">Message body to be sent to remote object.</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.InvokeAsync(System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)">
            <summary>
            Called by the generated proxy class to send the request to the remote object and get the response back.
            </summary>
            <param name="interfaceId">Id of the remote interface.</param>
            <param name="methodId">Id of the remote method to be invokved.</param>
            <param name="requestMsgBodyValue">Request body.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>A task that represents the asynchronous operation async call to remote object.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.ContinueWithResult``1(System.Int32,System.Int32,System.Threading.Tasks.Task{System.Object})">
            <summary>
            Called by the generated proxy class to get the result from the response body.
            </summary>
            <typeparam name="TRetval"><see cref="T:System.Type"/> of the remote method return value.</typeparam>
            <param name="interfaceId">Interface Id for the remoted interface.</param>
            <param name="methodId">Method Id for the remote method.</param>
            <param name="task">A task that represents the asynchronous operation for remote method call.</param>
            <returns>A task that represents the asynchronous operation for remote method call.
            The value of the TRetval contains the remote method return value. </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.GetReturnValue(System.Int32,System.Int32,System.Object)">
            <summary>
            Implemented by the derived class to type cast the response body and extract the value from it.
            </summary>
            <param name="interfaceId">Interface Id for the actor interface.</param>
            <param name="methodId">Method Id for the actor method.</param>
            <param name="responseBody">Response body.</param>
            <returns>Return value of method call as <see cref="T:System.Object"/>.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.ContinueWith(System.Threading.Tasks.Task{System.Object})">
            <summary>
            Called by the generated proxy class to continue after getting the response body that does not have value.
            </summary>
            <param name="task">A task that represents the asynchronous operation for remote method call.</param>
            <returns>A task that represents the asynchronous operation for remote method call.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.CreateRequestMessageBodyV2(System.String,System.String,System.Int32)">
            <summary>
            Creates the Remoting request message Body 
            </summary>
            <param name="interfaceName">Full Name of the service interface for which this call is invoked</param>
            <param name="methodName">Method Name of the service interface for which this call is invoked</param>
            <param name="parameterCount">Number of Parameters in the service interface Method</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.ContinueWithResultV2``1(System.Threading.Tasks.Task{Microsoft.ServiceFabric.Services.Remoting.V2.IServiceRemotingResponseMessageBody})">
            <summary>
            Called by the generated proxy class to get the result from the response body.
            </summary>
            <typeparam name="TRetval"><see cref="T:System.Type"/> of the remote method return value.</typeparam>
            <param name="task">A task that represents the asynchronous operation for remote method call.</param>
            <returns>A task that represents the asynchronous operation for remote method call.
            The value of the TRetval contains the remote method return value. </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.InvokeAsyncV2(System.Int32,System.Int32,Microsoft.ServiceFabric.Services.Remoting.V2.IServiceRemotingRequestMessageBody,System.Threading.CancellationToken)">
            <summary>
            Called by the generated proxy class to send the request to the remote object and get the response back.
            </summary>
            <param name="interfaceId">Id of the remote interface.</param>
            <param name="methodId">Id of the remote method to be invokved.</param>
            <param name="requestMsgBodyValue">Request body.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>A task that represents the asynchronous operation async call to remote object.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.InvokeV2(System.Int32,System.Int32,Microsoft.ServiceFabric.Services.Remoting.V2.IServiceRemotingRequestMessageBody)">
            <summary>
            Called by the generated proxy class to send the requestMessage to the remote object.
            </summary>
            <param name="interfaceId">Id of the remote interface.</param>
            <param name="methodId">Id of the remote method to be invokved.</param>
            <param name="requestMsgBodyValue">Message body to be sent to remote object.</param>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.Builder.CodeBuilderAttribute">
            <summary>
            The Attribute class to configure dyanamic code generation process for service remoting.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.Builder.CodeBuilderAttribute.#ctor">
            <summary>
            Initializes a new instance of the ActorCodeBuilderAttribute class.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Remoting.Builder.CodeBuilderAttribute.EnableDebugging">
            <summary>
            Gets or sets enable debugging flag for the attribute to be used by auto code generation.
            </summary>
            <value><see cref="T:System.Boolean"/> to get or set enable debugging flag for the attribute to be used by auto code generation.</value>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.Builder.IProxyActivator">
            <summary>
            Interface to create <see cref="T:Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase"/> objects.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.Builder.IProxyActivator.CreateInstance">
            <summary>
            Create the instance of the generated proxy type.
            </summary>
            <returns>An instance of the generated proxy as <see cref="T:Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase"/></returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.Builder.MethodDispatcherBase">
            <summary>
            This class dispatches requests from the client to the interface/method of the remoted object.
            This class is used by remoting code generator.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Remoting.Builder.MethodDispatcherBase.InterfaceId">
            <summary>
             Interface Id is used to identify remoting Interfaces.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.Builder.MethodDispatcherBase.DispatchAsync(System.Object,System.Int32,System.Object,System.Threading.CancellationToken)">
             <summary>
            This method is used to dispatch request to the specified methodId of the 
             interface implemented by the remoted object.
             </summary>
             <param name="objectImplementation"></param>
             <param name="methodId"></param>
             <param name="requestBody"></param>
             <param name="cancellationToken"></param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.Builder.MethodDispatcherBase.Dispatch(System.Object,System.Int32,System.Object)">
            <summary>
            This method is used to dispatch one way messages to the specified methodId of the 
            interface implemented by the remoted object.
            </summary>
            <param name="objectImplementation"></param>
            <param name="methodId"></param>
            <param name="messageBody"></param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.Builder.MethodDispatcherBase.ContinueWith(System.Threading.Tasks.Task)">
            <summary>
            Internal - used by Service remoting
            </summary>
            <param name="task">continuation task</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.Builder.MethodDispatcherBase.GetMethodName(System.Int32)">
            <summary>
            
            </summary>
            <param name="methodId"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.FabricTransport.FabricTransportRemotingSettings">
            <summary>
            Represents a settings that configures the  FabricTransport communication.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.FabricTransport.FabricTransportRemotingSettings.#ctor">
            <summary>
            Creates a new FabricTransportRemotingSettings with default Values.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Remoting.FabricTransport.FabricTransportRemotingSettings.OperationTimeout">
            <summary>
            Gets or sets the operation Timeout  which governs the whole process of sending a message, including receiving a reply message for a request/reply service operation.
             This timeout also applies when sending reply messages from a callback contract method.
            </summary>
            <value>The OperationTimeout as <see cref="T:System.TimeSpan"/>.</value>
            <remarks>Default Value for Operation Timeout is set as 5 mins.</remarks>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Remoting.FabricTransport.FabricTransportRemotingSettings.KeepAliveTimeout">
            <summary>
            Gets or sets the KeepAliveTimeout that provides a way to configure  Tcp keep-alive option.
            </summary>
            <value>The KeepAliveTimeout as <see cref="T:System.TimeSpan"/>.</value>
            <remarks>Default Value for KeepAliveTimeout Timeout is set as TimeSpan.Zero. which indicates we disable the tcp keepalive option.
            If you are using loadbalancer , you may need to configure this in order to avoid  the loadbalancer to close the connection after certain time. </remarks>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Remoting.FabricTransport.FabricTransportRemotingSettings.ConnectTimeout">
            <summary>
            Gets or sets the maximum time allowed for the connection to be established successfully.
            </summary>
            <value>The ConnectTimeout as <see cref="T:System.TimeSpan"/>.</value>
            <remarks>Default Value for ConnectTimeout Timeout is set as 5 seconds.</remarks>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Remoting.FabricTransport.FabricTransportRemotingSettings.MaxMessageSize">
            <summary>
            Gets or sets the maximum size for a message that can be received on a channel configured with this setting.
            </summary>
            <value>The maximum size of the message in bytes.
            </value>
            <remarks>
            Default Value for MaxMessageSize used is 4194304 bytes
            </remarks>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Remoting.FabricTransport.FabricTransportRemotingSettings.MaxQueueSize">
            <summary>
            Gets or sets the maximum size, of a queue that stores messages while they are processed for an endpoint configured with this setting. 
            </summary>
            <value>The maximum size for a Queue that receives messages from the channel. 
            </value>
            <remarks>
            Default value is 10,000 messages</remarks>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Remoting.FabricTransport.FabricTransportRemotingSettings.MaxConcurrentCalls">
            <summary>
            Gets or sets the maximum number of messages actively service processes at one time.
             </summary>
             <value>
            The MaxConcurrentCalls is  the upper limit of active messages in the service.
             </value>
             <remarks>
                Default  value for the MaxConcurrentCalls is 16*Number of processors.
             </remarks>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Remoting.FabricTransport.FabricTransportRemotingSettings.HeaderBufferSize">
            <summary>
            HeaderBufferSize represents size of each header buffer in the bufferPool .
             </summary>
             <remarks>
                Defaults  value for the HeaderBufferSize is 1024 bytes.
             </remarks>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Remoting.FabricTransport.FabricTransportRemotingSettings.HeaderMaxBufferCount">
            <summary>
            HeaderMaxBufferCount represents the maximum number of header buffers assigned  to the BufferPool.
             </summary>
             <remarks>
                Defaults  value for the HeaderMaxBufferCount is 1000.
             </remarks>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Remoting.FabricTransport.FabricTransportRemotingSettings.SecurityCredentials">
             <summary>
             Gets or sets the security credentials for securing the communication. 
             </summary>
             <value>The security credentials as  <see cref="T:System.Fabric.SecurityCredentials"/>.
             </value>
             <remarks>
             Default Value for SecurityCredentials is None.
             SecurityCredential can be of type x509SecurityCredentail <seealso cref="T:System.Fabric.X509Credentials"/>or
              WindowsCredentials <seealso cref="T:System.Fabric.WindowsCredentials"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.FabricTransport.FabricTransportRemotingSettings.LoadFrom(System.String,System.String,System.String)">
            <summary>
            Loads the FabricTransport settings from a sectionName specified in the configuration file. 
            Configuration File can be specified using the filePath or using the name of the configuration package specified in the service manifest.
            It will first try to load config using configPackageName. If configPackageName is not specified then try to load from filePath.
            </summary>
            <param name="sectionName">The name of the section within the configuration file. If not found section in configuration file, it will throw ArgumentException.</param>
            <param name="filepath">The full path of the file where the settings will be loaded from. 
             If not specified , it will first try to load from default Config Package"Config" , if not found then load from Settings "ClientExeName.Settings.xml" present in Client Exe directory. </param>
             <param name="configPackageName"> Name of the configuration package.If its null or empty,it will check for file in filePath.</param>
            <returns>The FabricTransportRemotingSettings</returns>
            <remarks>
            The following are the parameter names that should be provided in the configuration file, to be recognizable by service fabric to load the transport settings.
                
                1. MaxQueueSize - <see cref="P:Microsoft.ServiceFabric.Services.Remoting.FabricTransport.FabricTransportRemotingSettings.MaxQueueSize"/>value in long.
                2. MaxMessageSize - <see cref="P:Microsoft.ServiceFabric.Services.Remoting.FabricTransport.FabricTransportRemotingSettings.MaxMessageSize"/>value in bytes.
                3. MaxConcurrentCalls - <see cref="P:Microsoft.ServiceFabric.Services.Remoting.FabricTransport.FabricTransportRemotingSettings.MaxConcurrentCalls"/>value in long.
                4. SecurityCredentials - <see cref="P:Microsoft.ServiceFabric.Services.Remoting.FabricTransport.FabricTransportRemotingSettings.SecurityCredentials"/> value.
                5. OperationTimeoutInSeconds - <see cref="P:Microsoft.ServiceFabric.Services.Remoting.FabricTransport.FabricTransportRemotingSettings.OperationTimeout"/> value in seconds.
                6. KeepAliveTimeoutInSeconds - <see cref="P:Microsoft.ServiceFabric.Services.Remoting.FabricTransport.FabricTransportRemotingSettings.KeepAliveTimeout"/> value in seconds.
                7. ConnectTimeoutInMilliseconds - <see cref="P:Microsoft.ServiceFabric.Services.Remoting.FabricTransport.FabricTransportRemotingSettings.ConnectTimeout"/> value in milliseconds.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.FabricTransport.FabricTransportRemotingSettings.TryLoadFrom(System.String,Microsoft.ServiceFabric.Services.Remoting.FabricTransport.FabricTransportRemotingSettings@,System.String,System.String)">
            <summary>
            Try to load the FabricTransport settings from a sectionName specified in the configuration file.
            Configuration File can be specified using the filePath or using the name of the configuration package specified in the service manifest.
            It will first try to load config using configPackageName. If configPackageName is not specified then try to load from filePath.
            </summary>
            <param name="sectionName">The name of the section within the configuration file. If not found section in configuration file, it return false.</param>
            <param name="filepath">The full path of the file where the settings will be loaded from. 
             If not specified , it will first try to load from default Config Package"Config" , if not found then load from Settings "ClientExeName.Settings.xml" present in Client Exe directory. </param>
             <param name="configPackageName">The name of the configuration package. If its null or empty, it will check for file in filePath.</param>
            <param name="settings">When this method returns it sets the <see cref="T:Microsoft.ServiceFabric.Services.Remoting.FabricTransport.FabricTransportRemotingSettings"/> settings if load from Config succeeded. If fails, its sets settings to null. </param>
            <returns><see cref="T:System.Boolean"/> specifies whether the settings get loaded successfully from Config.
            It returns true when load from Config succeeded, else return false. </returns>
            <remarks>
            The following are the parameter names that should be provided in the configuration file,to be recognizable by service fabric to load the transport settings.
                
                1. MaxQueueSize - <see cref="P:Microsoft.ServiceFabric.Services.Remoting.FabricTransport.FabricTransportRemotingSettings.MaxQueueSize"/>value in long.
                2. MaxMessageSize - <see cref="P:Microsoft.ServiceFabric.Services.Remoting.FabricTransport.FabricTransportRemotingSettings.MaxMessageSize"/>value in bytes.
                3. MaxConcurrentCalls - <see cref="P:Microsoft.ServiceFabric.Services.Remoting.FabricTransport.FabricTransportRemotingSettings.MaxConcurrentCalls"/>value in long.
                4. SecurityCredentials - <see cref="P:Microsoft.ServiceFabric.Services.Remoting.FabricTransport.FabricTransportRemotingSettings.SecurityCredentials"/> value.
                5. OperationTimeoutInSeconds - <see cref="P:Microsoft.ServiceFabric.Services.Remoting.FabricTransport.FabricTransportRemotingSettings.OperationTimeout"/> value in seconds.
                6. KeepAliveTimeoutInSeconds - <see cref="P:Microsoft.ServiceFabric.Services.Remoting.FabricTransport.FabricTransportRemotingSettings.KeepAliveTimeout"/> value in seconds.
                7. ConnectTimeoutInMilliseconds - <see cref="P:Microsoft.ServiceFabric.Services.Remoting.FabricTransport.FabricTransportRemotingSettings.ConnectTimeout"/> value in milliseconds.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.FabricTransport.FabricTransportRemotingSettings.GetDefault(System.String)">
             <summary>
             Returns the default Settings. Loads the configuration file from default Config Package"Config", if not found then try to load from  default config file "ClientExeName.Settings.xml"  from Client Exe directory.
            </summary>
             <param name="sectionName">The name of the section within the configuration file. If not found section in configuration file, it will return the default Settings.</param>
             <returns></returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.FabricTransport.Runtime.FabricTransportRemotingListenerSettings">
             <summary>
            Settings that configures the  FabricTransport Listener.
             </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.FabricTransport.Runtime.FabricTransportRemotingListenerSettings.#ctor">
            <summary>
            Creates a new instance of FabricTransportRemotingListenerSettings and initializes properties with default Values.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Remoting.FabricTransport.Runtime.FabricTransportRemotingListenerSettings.EndpointResourceName">
            <summary>
            EndpointResourceName is name of the endpoint resource specified in ServiceManifest .This is used to obtain the port number on which to
            service will listen. 
            </summary>
            <value>
            EndpointResourceName is  name of the  endpoint resource defined in the service manifest.
            </value>
            <remarks>
            Default value of EndpointResourceName  is "ServiceEndpoint" </remarks>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Remoting.FabricTransport.Runtime.FabricTransportRemotingListenerSettings.OperationTimeout">
            <summary>
            Operation Timeout  which governs the whole process of sending a message, including receiving a reply message for a request/reply service operation.
             This timeout also applies when sending reply messages from a callback contract method.
            </summary>
            <value>OperationTimeout as <see cref="T:System.TimeSpan"/></value>
            <remarks>Default Value for Operation Timeout is set as 5 mins</remarks>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Remoting.FabricTransport.Runtime.FabricTransportRemotingListenerSettings.KeepAliveTimeout">
            <summary>
            KeepAliveTimeout is provides a way to configure  Tcp keep-alive option.
            </summary>
            <value>KeepAliveTimeout as <see cref="T:System.TimeSpan"/></value>
            <remarks>Default Value for KeepAliveTimeout Timeout is set as TimeSpan.Zero. which indicates we disable the tcp keepalive option.
            If you are using loadbalancer , you may need to configure this in order to avoid  the loadbalancer to close the connection after certain time </remarks>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Remoting.FabricTransport.Runtime.FabricTransportRemotingListenerSettings.MaxMessageSize">
            <summary>
            MaxMessageSize represents  the maximum size for a message that can be received on a channel configured with this setting.
            </summary>
            <value>Maximum size of the message in bytes.
            </value>
            <remarks>
            Default Value for MaxMessageSize used is 4194304 bytes
            </remarks>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Remoting.FabricTransport.Runtime.FabricTransportRemotingListenerSettings.MaxQueueSize">
            <summary>
            The maximum size, of a queue that stores messages while they are processed for an endpoint configured with this setting. 
            </summary>
            <value> Max Size for a Queue that receives messages from the channel 
            </value>
            <remarks>
            Default value is 10,000 messages</remarks>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Remoting.FabricTransport.Runtime.FabricTransportRemotingListenerSettings.MaxConcurrentCalls">
            <summary>
            MaxConcurrentCalls represents maximum number of messages actively service processes at one time.
             </summary>
             <value>
            MaxConcurrentCalls is  the upper limit of active messages in the service.
             </value>
             <remarks>
                Defaults  value for the MaxConcurrentCalls is to the Number of processors.
             </remarks>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Remoting.FabricTransport.Runtime.FabricTransportRemotingListenerSettings.HeaderBufferSize">
            <summary>
            HeaderBufferSize represents size of each header buffer in the bufferPool .
             </summary>
             <remarks>
                Defaults  value for the HeaderBufferSize is 1024 bytes.
             </remarks>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Remoting.FabricTransport.Runtime.FabricTransportRemotingListenerSettings.HeaderMaxBufferCount">
            <summary>
            HeaderMaxBufferCount represents the maximum number of header buffers assigned  to the BufferPool.
             </summary>
             <remarks>
                Defaults  value for the HeaderMaxBufferCount is 1000.
             </remarks>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Remoting.FabricTransport.Runtime.FabricTransportRemotingListenerSettings.SecurityCredentials">
             <summary>
             Security credentials for securing the communication 
             </summary>
             <value>SecurityCredentials as  <see cref="T:System.Fabric.SecurityCredentials"/>
             </value>
             <remarks>
             Default Value for SecurityCredentials is None
             SecurityCredential can be of type x509SecurityCredentail <seealso cref="T:System.Fabric.X509Credentials"/>or
              WindowsCredentials <seealso cref="T:System.Fabric.WindowsCredentials"/>
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.FabricTransport.Runtime.FabricTransportRemotingListenerSettings.LoadFrom(System.String,System.String)">
            <summary>
            Loads the FabricTransport settings from a section specified in the service settings configuration file - settings.xml 
            </summary>
            <param name="sectionName">Name of the section within the configuration file. if not found , it throws ArgumentException.</param>
            <param name="configPackageName"> Name of the configuration package. if not found Settings.xml in the configuration package path, it throws ArgumentException. 
            If not specified, default name is "Config"</param>
            <returns>FabricTransportRemotingListenerSettings</returns>
            <remarks>
            The following are the parameter names that should be provided in the configuration file,to be recognizable by service fabric to load the transport settings.
                
                1. MaxQueueSize - <see cref="P:Microsoft.ServiceFabric.Services.Remoting.FabricTransport.FabricTransportRemotingSettings.MaxQueueSize"/>value in long.
                2. MaxMessageSize - <see cref="P:Microsoft.ServiceFabric.Services.Remoting.FabricTransport.FabricTransportRemotingSettings.MaxMessageSize"/>value in bytes.
                3. MaxConcurrentCalls - <see cref="P:Microsoft.ServiceFabric.Services.Remoting.FabricTransport.FabricTransportRemotingSettings.MaxConcurrentCalls"/>value in long.
                4. SecurityCredentials - <see cref="P:Microsoft.ServiceFabric.Services.Remoting.FabricTransport.FabricTransportRemotingSettings.SecurityCredentials"/> value.
                5. OperationTimeoutInSeconds - <see cref="P:Microsoft.ServiceFabric.Services.Remoting.FabricTransport.FabricTransportRemotingSettings.OperationTimeout"/> value in seconds.
                6. KeepAliveTimeoutInSeconds - <see cref="P:Microsoft.ServiceFabric.Services.Remoting.FabricTransport.FabricTransportRemotingSettings.KeepAliveTimeout"/> value in seconds.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.FabricTransport.Runtime.FabricTransportRemotingListenerSettings.TryLoadFrom(System.String,Microsoft.ServiceFabric.Services.Remoting.FabricTransport.Runtime.FabricTransportRemotingListenerSettings@,System.String)">
            <summary>
            Try to load the FabricTransport settings from a section specified in the service settings configuration file - settings.xml 
            </summary>
            <param name="sectionName">Name of the section within the configuration file. if not found , it return false</param>
            <param name="configPackageName"> Name of the configuration package. if not found Settings.xml in the configuration package path, it return false. 
            If not specified, default name is "Config"</param>
            <param name="remotingListenerSettings">When this method returns it sets the <see cref="T:Microsoft.ServiceFabric.Services.Remoting.FabricTransport.Runtime.FabricTransportRemotingListenerSettings"/> listenersettings if load from Config succeeded. If fails ,its sets listenerSettings to null/> </param>
            <returns> <see cref="T:System.Boolean"/> specifies whether the settings get loaded successfully from Config.
            It returns true when load from Config succeeded, else return false.</returns>
            <remarks>
            The following are the parameter names that should be provided in the configuration file,to be recognizable by service fabric to load the transport settings.
                
                1. MaxQueueSize - <see cref="P:Microsoft.ServiceFabric.Services.Remoting.FabricTransport.FabricTransportRemotingSettings.MaxQueueSize"/>value in long.
                2. MaxMessageSize - <see cref="P:Microsoft.ServiceFabric.Services.Remoting.FabricTransport.FabricTransportRemotingSettings.MaxMessageSize"/>value in bytes.
                3. MaxConcurrentCalls - <see cref="P:Microsoft.ServiceFabric.Services.Remoting.FabricTransport.FabricTransportRemotingSettings.MaxConcurrentCalls"/>value in long.
                4. SecurityCredentials - <see cref="P:Microsoft.ServiceFabric.Services.Remoting.FabricTransport.FabricTransportRemotingSettings.SecurityCredentials"/> value.
                5. OperationTimeoutInSeconds - <see cref="P:Microsoft.ServiceFabric.Services.Remoting.FabricTransport.FabricTransportRemotingSettings.OperationTimeout"/> value in seconds.
                6. KeepAliveTimeoutInSeconds - <see cref="P:Microsoft.ServiceFabric.Services.Remoting.FabricTransport.FabricTransportRemotingSettings.KeepAliveTimeout"/> value in seconds.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.FabricTransport.Runtime.FabricTransportRemotingListenerSettings.GetDefault(System.String)">
             <summary>
             FabricTransportRemotingListenerSettings returns the default Settings .Loads the configuration file from default Config Package"Config" .
            </summary>
             <param name="sectionName">Name of the section within the configuration file. If not found section in configuration file, it will return the default Settings</param>
             <returns></returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.FabricTransport.FabricTransportServiceRemotingProviderAttribute">
            <summary>
             Sets Fabric TCP transport as the default service remoting transport provider in the assembly.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.FabricTransport.FabricTransportServiceRemotingProviderAttribute.#ctor">
            <summary>
            Constructs a <see cref="T:Microsoft.ServiceFabric.Services.Remoting.FabricTransport.FabricTransportServiceRemotingProviderAttribute"/> which can be used
            to set Fabric TCP transport as the default service remoting transport provider in the assembly.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Remoting.FabricTransport.FabricTransportServiceRemotingProviderAttribute.MaxMessageSize">
            <summary>
                Gets or Sets the maximum size of the remoting message in bytes.
                If value for this property is not specified or it is less than or equals to zero,
                a default value of 4,194,304 bytes (4 MB) is used.
            </summary>
            <value>
                The maximum size of the remoting message in bytes. If this value is not specified 
                or it is less than or equals to zero, a default value of 4,194,304 bytes (4 MB) is used.
            </value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Remoting.FabricTransport.FabricTransportServiceRemotingProviderAttribute.OperationTimeoutInSeconds">
            <summary>
                Gets or Sets the operation timeout in seconds. If the operation is not completed in the specified
                time, it will be timed out. By default, exception handler of 
                <see cref="T:Microsoft.ServiceFabric.Services.Remoting.V1.FabricTransport.Client.FabricTransportServiceRemotingClientFactory"/>
                retries the timed out exception. It is recommended to not change the operation timeout from it's default value. 
            </summary>
            <value>
                The operation timeout in seconds. If not specified or less than zero, default operation timeout
                of maximum value is used. 
            </value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Remoting.FabricTransport.FabricTransportServiceRemotingProviderAttribute.KeepAliveTimeoutInSeconds">
            <summary>
                Gets or Sets the keep alive timeout in seconds. This settings is useful in the scenario when the client 
                and service are connected via load balancer that closes the connection if it is idle for some time.
                If keep alive timeout is configured, the connection will be kept alive by sending ping messages at 
                that interval.
            </summary>
            <value>
                The keep alive timeout in seconds.
            </value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Remoting.FabricTransport.FabricTransportServiceRemotingProviderAttribute.ConnectTimeoutInMilliseconds">
            <summary>
                Gets or Sets the connect timeout in milliseconds. This settings specifies the maximum time allowed for the connection 
                to be established.
            </summary>
            <value>
                The connect timeout in Milliseconds.
            </value>
            <remarks>Default Value for ConnectTimeout Timeout is 5 seconds.</remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.FabricTransport.FabricTransportServiceRemotingProviderAttribute.CreateServiceRemotingListener(System.Fabric.ServiceContext,Microsoft.ServiceFabric.Services.Remoting.IService)">
            <summary>
                Creates a service remoting listener for remoting the service interface.
            </summary>
            <param name="serviceContext">
                The context of the service for which the remoting listener is being constructed.
            </param>
            <param name="serviceImplementation">
                The service implementation object.
            </param>
            <returns>
                A <see cref="T:Microsoft.ServiceFabric.Services.Remoting.V1.FabricTransport.Runtime.FabricTransportServiceRemotingListener"/>
                as <see cref="T:Microsoft.ServiceFabric.Services.Remoting.Runtime.IServiceRemotingListener"/> 
                for the specified service implementation.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.FabricTransport.FabricTransportServiceRemotingProviderAttribute.CreateServiceRemotingClientFactory(Microsoft.ServiceFabric.Services.Remoting.V1.IServiceRemotingCallbackClient)">
            <summary>
                Creates a  V1 service remoting client factory for connecting to the service over remoted service interfaces.
            </summary>
            <param name="callbackClient">
               The client implementation where the callbacks should be dispatched.
            </param>
            <returns>
                A <see cref="T:Microsoft.ServiceFabric.Services.Remoting.V1.FabricTransport.Client.FabricTransportServiceRemotingClientFactory"/>
                as <see cref="T:Microsoft.ServiceFabric.Services.Remoting.V1.Client.IServiceRemotingClientFactory"/>
                that can be used with <see cref="T:Microsoft.ServiceFabric.Services.Remoting.Client.ServiceProxyFactory"/> to 
                generate service proxy to talk to a stateless or stateful service over remoted actor interface.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.FabricTransport.FabricTransportServiceRemotingProviderAttribute.CreateServiceRemotingListenerV2(System.Fabric.ServiceContext,Microsoft.ServiceFabric.Services.Remoting.IService)">
            <summary>
                Creates a V2 service remoting listener for remoting the service interface.
            </summary>
            <param name="serviceContext">
                The context of the service for which the remoting listener is being constructed.
            </param>
            <param name="serviceImplementation">
                The service implementation object.
            </param>
            <returns>
                A <see cref="T:Microsoft.ServiceFabric.Services.Remoting.V1.FabricTransport.Runtime.FabricTransportServiceRemotingListener"/>
                as <see cref="T:Microsoft.ServiceFabric.Services.Remoting.Runtime.IServiceRemotingListener"/> 
                for the specified service implementation.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.FabricTransport.FabricTransportServiceRemotingProviderAttribute.CreateServiceRemotingClientFactoryV2(Microsoft.ServiceFabric.Services.Remoting.V2.Client.IServiceRemotingCallbackMessageHandler)">
            <summary>
                Creates a  V2 service remoting client factory for connecting to the service over remoted service interfaces.
            </summary>
            <param name="callbackMessageHandler">
               The client implementation where the callbacks should be dispatched.
            </param>
            <returns>
                A <see cref="T:Microsoft.ServiceFabric.Services.Remoting.V1.FabricTransport.Client.FabricTransportServiceRemotingClientFactory"/>
                as <see cref="T:Microsoft.ServiceFabric.Services.Remoting.V2.Client.IServiceRemotingClientFactory"/>
                that can be used with <see cref="T:Microsoft.ServiceFabric.Services.Remoting.Client.ServiceProxyFactory"/> to 
                generate service proxy to talk to a stateless or stateful service over remoted actor interface.
            </returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.ServiceRemotingProviderAttribute">
            <summary>
            This is a base type for attribute that sets the default service remoting provider to use for 
            remoting the service interfaces defined and used in the assembly.
            </summary>
            <remarks>
                <para>
                On service side, implementation of this attribute is looked up by
                <see cref="M:Microsoft.ServiceFabric.Services.Remoting.Runtime.ServiceRemotingExtensions.CreateServiceRemotingListener``1(``0,System.Fabric.StatefulServiceContext)"/> and
                <see cref="M:Microsoft.ServiceFabric.Services.Remoting.Runtime.ServiceRemotingExtensions.CreateServiceRemotingListener``1(``0,System.Fabric.StatelessServiceContext)"/> 
                methods on the runtime to create a default <see cref="T:Microsoft.ServiceFabric.Services.Remoting.Runtime.IServiceRemotingListener"/> for the stateful and stateless services. 
                </para>
                <para>
                On client side, implementation of this attribute is looked up by 
                <see cref="T:Microsoft.ServiceFabric.Services.Remoting.V1.Client.ServiceProxyFactory"/> constructor to create a default
                <see cref="T:Microsoft.ServiceFabric.Services.Remoting.V1.Client.IServiceRemotingClientFactory"/> when it is not specified.
                </para>
                <para>
                Note that on client side
                <see cref="M:Microsoft.ServiceFabric.Services.Remoting.Client.ServiceProxy.Create``1(System.Uri,Microsoft.ServiceFabric.Services.Client.ServicePartitionKey,Microsoft.ServiceFabric.Services.Communication.Client.TargetReplicaSelector,System.String)"/> 
                method create a default <see cref="T:Microsoft.ServiceFabric.Services.Remoting.V1.Client.ServiceProxyFactory"/> once and hence the provider lookup happens
                only for the first time, after which the same provider is used.
                </para>
                <para>
                The order in which this attribute is looked up is as follows:
                <list type="number">
                    <item>
                        In the entry <see cref="T:System.Reflection.Assembly"/> obtained by calling method <see cref="M:System.Reflection.Assembly.GetEntryAssembly"/> 
                    </item>
                    <item>
                        In the <see cref="T:System.Reflection.Assembly"/> that defines the remote interface for which listener or proxy is being created. 
                    </item>
                </list>
                </para>
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.ServiceRemotingProviderAttribute.#ctor">
            <summary>
            Initializes a new instance of the ServiceRemotingProviderAttribute class.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Remoting.ServiceRemotingProviderAttribute.RemotingClient">
            <summary>
            RemotingClient is used to determine where  V1 or V2 remoting Client is used.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Remoting.ServiceRemotingProviderAttribute.RemotingListener">
            <summary>
            RemotingListener is used to determine where listener is in V1, V2 or Compact Mode.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.ServiceRemotingProviderAttribute.CreateServiceRemotingListener(System.Fabric.ServiceContext,Microsoft.ServiceFabric.Services.Remoting.IService)">
            <summary>
            Creates a V1 service remoting listener for remoting the service interface.
            </summary>
            <param name="serviceContext">The context of the service for which the remoting listener is being constructed.</param>
            <param name="serviceImplementation">The service implementation object.</param>
            <returns>An <see cref="T:Microsoft.ServiceFabric.Services.Remoting.Runtime.IServiceRemotingListener"/> for the specified service.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.ServiceRemotingProviderAttribute.CreateServiceRemotingClientFactory(Microsoft.ServiceFabric.Services.Remoting.V1.IServiceRemotingCallbackClient)">
            <summary>
            Creates a service remoting client factory that can be used by the 
            <see cref="T:Microsoft.ServiceFabric.Services.Remoting.V1.Client.ServiceProxyFactory"/> to create a proxy for the remoted interface of the service.
            </summary>
            <param name="callbackClient">Client implementation where the callbacks should be dispatched.</param>
            <returns>An <see cref="T:Microsoft.ServiceFabric.Services.Remoting.V1.Client.IServiceRemotingClientFactory"/>.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.ServiceRemotingProviderAttribute.CreateServiceRemotingListenerV2(System.Fabric.ServiceContext,Microsoft.ServiceFabric.Services.Remoting.IService)">
            <summary>
            Creates a V2 service remoting listener for remoting the service interface.
            </summary>
            <param name="serviceContext">The context of the service for which the remoting listener is being constructed.</param>
            <param name="serviceImplementation">The service implementation object.</param>
            <returns>An <see cref="T:Microsoft.ServiceFabric.Services.Remoting.Runtime.IServiceRemotingListener"/> for the specified service.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.ServiceRemotingProviderAttribute.CreateServiceRemotingClientFactoryV2(Microsoft.ServiceFabric.Services.Remoting.V2.Client.IServiceRemotingCallbackMessageHandler)">
            <summary>
            Creates a V2 service remoting client factory that can be used by the 
            <see cref="T:Microsoft.ServiceFabric.Services.Remoting.V1.Client.ServiceProxyFactory"/> to create a proxy for the remoted interface of the service.
            </summary>
            <param name="callbackMessageHandler">Client implementation where the callbacks should be dispatched.</param>
            <returns>An <see cref="T:Microsoft.ServiceFabric.Services.Remoting.V2.Client.IServiceRemotingClientFactory"/>.</returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.RemotingClient">
            <summary>
            Determines the remoting stack for client
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Services.Remoting.RemotingClient.V1Client">
            <summary>
            This is selected to create V1 Client.V2 is a old(soon to be deprecated) Remoting Stack.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Services.Remoting.RemotingClient.V2Client">
            <summary>
            This is selected to create V2 Client.V2 is a new Remoting Stack.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.RemotingListener">
            <summary>
            Determines the remoting stack for server/listener when using remoting provider attribuite to determine the remoting client.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Services.Remoting.RemotingListener.V1Listener">
            <summary>
            This is selected to create V1 Listener.V2 is a old(soon to be deprecated) Remoting Stack.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Services.Remoting.RemotingListener.CompatListener">
            <summary>
            This is selected to create Listener which creates both V1 and V2 Listener to support both V1 and V2 Clients.
            This is useful in case of upgrade from V1 to V2 Listener.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Services.Remoting.RemotingListener.V2Listener">
            <summary>
            This is selected to create V2 Listener.V2 is a new Remoting Stack.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.V1.Builder.MethodDispatcherBaseWithSerializer">
            <summary>
            The class dispatches the requests from the client to the interface/method of the remoted objectts.
            This class is used by remoting code generator. This class caches the Serializer.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V1.Builder.MethodDispatcherBaseWithSerializer.DispatchAsync(System.Object,System.Int32,System.Object,System.Threading.CancellationToken)">
             <summary>
            This method is used to dispatch request to the specified methodId of the 
             interface implemented by the remoted object.
             </summary>
             <param name="objectImplementation"></param>
             <param name="methodId"></param>
             <param name="requestBody"></param>
             <param name="cancellationToken"></param>
             <returns></returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V1.Builder.MethodDispatcherBaseWithSerializer.Dispatch(System.Object,System.Int32,System.Object)">
            <summary>
            This method is used to dispatch one way messages to the specified methodId of the 
            interface implemented by the remoted object.
            </summary>
            <param name="objectImplementation"></param>
            <param name="methodId"></param>
            <param name="messageBody"></param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V1.Builder.MethodDispatcherBaseWithSerializer.ContinueWithResult``1(System.Int32,System.Threading.Tasks.Task{``0})">
            <summary>
            Internal - used by Service remoting
            </summary>
            <typeparam name="TRetval">Return value</typeparam>
            <param name="methodId">method id</param>
            <param name="task">continuation task</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V1.Builder.MethodDispatcherBaseWithSerializer.CreateResponseBody(System.Int32,System.Object)">
            <summary>
            This method is implemented by the generated method dispatcher to create the response from the specified return value 
            as a result of dispatching the method to the remoted object. 
            </summary>
            <param name="methodId">Id of the method.</param>
            <param name="retval">The returned value from the method.</param>
            <returns>A <see cref="T:System.Object">Object</see> that represents the response body to be sent back to the client.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V1.Builder.MethodDispatcherBaseWithSerializer.OnDispatchAsync(System.Int32,System.Object,System.Object,System.Threading.CancellationToken)">
            <summary>
            This method is implemented by the generated method dispatcher to dispatch request to the specified methodId of the 
            interface implemented by the remoted object.
            </summary>
            <param name="methodId">Id of the method.</param>
            <param name="remotedObject">The remoted object instance.</param>
            <param name="requestBody">Request body</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation. 
            The result of the task is the return value from the method.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V1.Builder.MethodDispatcherBaseWithSerializer.OnDispatch(System.Int32,System.Object,System.Object)">
            <summary>
            This method is implemented by the generated method dispatcher to dispatch one way messages to the specified methodId of the 
            interface implemented by the remoted object.
            </summary>
            <param name="methodId">Id of the method.</param>
            <param name="remotedObject">The remoted object instance.</param>
            <param name="messageBody">message body</param>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.V1.Builder.ServiceMethodDispatcherBase">
            <summary>
            Service method dispatcher class. Internal use only.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.V1.Client.IServiceRemotingPartitionClient">
            <summary>
            Defines the interface for the client that communicate over remoting to a particular replica of a service partition.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.V1.Client.ServiceProxyFactory">
            <summary>
            Specifies the factory that creates proxies for remote communication to the specified service.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V1.Client.ServiceProxyFactory.#ctor(System.Func{Microsoft.ServiceFabric.Services.Remoting.V1.IServiceRemotingCallbackClient,Microsoft.ServiceFabric.Services.Remoting.V1.Client.IServiceRemotingClientFactory},Microsoft.ServiceFabric.Services.Communication.Client.OperationRetrySettings)">
            <summary>
            Instantiates the ServiceProxyFactory with the specified remoting factory and retrysettings.
            </summary>
            <param name="createServiceRemotingClientFactory">
            Specifies the factory method that creates the remoting client factory. The remoting client factory got from this method
            is cached in the ServiceProxyFactory.
            </param>
            <param name="retrySettings">Specifies the retry policy to use on exceptions seen when using the proxies created by this factory</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V1.Client.ServiceProxyFactory.CreateServiceProxy``1(System.Uri,Microsoft.ServiceFabric.Services.Client.ServicePartitionKey,Microsoft.ServiceFabric.Services.Communication.Client.TargetReplicaSelector,System.String)">
            <summary>
            Creates a proxy to communicate to the specified service using the remoted interface TServiceInterface that 
            the service implements.
            <typeparam name="TServiceInterface">Interface that is being remoted</typeparam>
            <param name="serviceUri">Uri of the Service.</param>
            <param name="partitionKey">The Partition key that determines which service partition is responsible for handling requests from this service proxy</param>
            <param name="targetReplicaSelector">Determines which replica or instance of the service partition the client should connect to.</param>
            <param name="listenerName">This parameter is Optional if the service has a single communication listener. The endpoints from the service
            are of the form {"Endpoints":{"Listener1":"Endpoint1","Listener2":"Endpoint2" ...}}. When the service exposes multiple endpoints, this parameter
            identifies which of those endpoints to use for the remoting communication.
            </param>
            <returns>The proxy that implement the interface that is being remoted. The returned object also implement <see cref="T:Microsoft.ServiceFabric.Services.Remoting.Client.IServiceProxy"/> interface.</returns>
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V1.Client.ServiceProxyFactory.CreateServiceRemotingClientFactory(Microsoft.ServiceFabric.Services.Remoting.V1.IServiceRemotingCallbackClient)">
            <summary>
            Creates service remoting client factory.
            </summary>
            <param name="callbackClient">Callback from the remoting listener to the client.</param>
            <returns>Created service remoting client factory as <see cref="T:Microsoft.ServiceFabric.Services.Remoting.V1.Client.IServiceRemotingClientFactory"/></returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.V1.Client.IServiceRemotingClient">
            <summary>
            Defines the interface that must be implemented to provide a client for Service Remoting communication.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V1.Client.IServiceRemotingClient.RequestResponseAsync(Microsoft.ServiceFabric.Services.Remoting.V1.ServiceRemotingMessageHeaders,System.Byte[])">
            <summary>
            Sends a message to the service and gets a response back.
            </summary>
            <param name="messageHeaders">The message headers.</param>
            <param name="requestBody">The message body.</param>
            <returns>Returns the response body.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V1.Client.IServiceRemotingClient.SendOneWay(Microsoft.ServiceFabric.Services.Remoting.V1.ServiceRemotingMessageHeaders,System.Byte[])">
            <summary>
            Sends a one-way message to the service.
            </summary>
            <param name="messageHeaders">The message headers.</param>
            <param name="requestBody">The message body.</param>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.V1.Client.IServiceRemotingClientFactory">
            <summary>
            Defines the interface that must be implemented for providing the remoting communication client factory.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.V1.Client.ServiceRemotingPartitionClient">
            <summary>
            Specifies the Service partition client for Remoting communication.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.V1.IServiceRemotingCallbackClient">
            <summary>
            Defines the interface that must be implemented for providing callback mechanism from the remoting listener to the client.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V1.IServiceRemotingCallbackClient.RequestResponseAsync(Microsoft.ServiceFabric.Services.Remoting.V1.ServiceRemotingMessageHeaders,System.Byte[])">
            <summary>
            Sends a message to the client and gets the response.
            </summary>
            <param name="messageHeaders">The message headers.</param>
            <param name="requestBody">The message body.</param>
            <returns>Response body</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V1.IServiceRemotingCallbackClient.OneWayMessage(Microsoft.ServiceFabric.Services.Remoting.V1.ServiceRemotingMessageHeaders,System.Byte[])">
            <summary>
            Sends a one way message to the client.
            </summary>
            <param name="messageHeaders">The message headers.</param>
            <param name="requestBody">The message body.</param>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.V1.RemoteExceptionInformation">
            <summary>
            Represents the fault type used by Service Remoting to transfer the exception details from the Service Replica to the client.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Remoting.V1.RemoteExceptionInformation.Data">
            <summary>
            Serialized exception or the exception message encoded as UTF8 if the exception cannot be serialized.
            </summary>
            <value>The data in the exception.</value>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V1.RemoteExceptionInformation.#ctor(System.Byte[])">
            <summary>
            Instantiates the RemoteExceptionInformation object with the data.
            </summary>
            <param name="data">The data to be sent to the client.</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V1.RemoteExceptionInformation.FromException(System.Exception)">
            <summary>
            Indicates a method that constructs the RemoteExceptionInformation from an exception.
            </summary>
            <param name="exception">The exception.</param>
            <returns>Returns the RemoteExceptionInformation.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V1.RemoteExceptionInformation.ToException(Microsoft.ServiceFabric.Services.Remoting.V1.RemoteExceptionInformation,System.Exception@)">
            <summary>
            Gets the exception from the RemoteExceptionInformation
            </summary>
            <param name="remoteExceptionInformation">The RemoteExceptionInformation.</param>
            <param name="result">The exception from the remote side.</param>
            <returns>true if there was a valid exception; otherwise, false.</returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.V1.ServiceRemotingMessageHeaders">
            <summary>
            Specifies the headers that are sent along with a ServiceRemoting message.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Remoting.V1.ServiceRemotingMessageHeaders.MethodId">
            <summary>
            Gets or sets the methodId of the remote method.
            </summary>
            <value>The method id.</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Remoting.V1.ServiceRemotingMessageHeaders.InterfaceId">
            <summary>
            Gets or sets the interface id of the remote interface.
            </summary>
            <value>The interface id.</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Remoting.V1.ServiceRemotingMessageHeaders.InvocationId">
            <summary>
            Gets or sets the identifier for the remote method invocation.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V1.ServiceRemotingMessageHeaders.#ctor">
            <summary>
            Initializes a new instance of the ServiceRemotingMessageHeaders class.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V1.ServiceRemotingMessageHeaders.AddHeader(System.String,System.Byte[])">
            <summary>
            Adds a new header with the specified name and value.
            Throws FabricElementAlreadyExistsException if a header with the same name already exists.
            </summary>
            <param name="headerName">The header Name.</param>
            <param name="headerValue">The header value.</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V1.ServiceRemotingMessageHeaders.TryGetHeaderValue(System.String,System.Byte[]@)">
            <summary>
            Gets the header with the specified name.
            </summary>
            <param name="headerName">The header Name.</param>
            <param name="headerValue">The header value.</param>
            <returns>true if a header with that name exists; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V1.ServiceRemotingMessageHeaders.Serialize(System.Runtime.Serialization.DataContractSerializer,Microsoft.ServiceFabric.Services.Remoting.V1.ServiceRemotingMessageHeaders)">
            <summary>
            Serializes the headers to a byte array.
            </summary>
            <param name="serializer">The serializer.</param>
            <param name="msg">The headers.</param>
            <returns>The serialized byte array.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V1.ServiceRemotingMessageHeaders.Deserialize(System.Runtime.Serialization.DataContractSerializer,System.Byte[])">
            <summary>
            De-serializes the byte array to a ServiceRemotingMessageHeaders object.
            </summary>
            <param name="serializer">The deserializer.</param>
            <param name="buffer">The buffer.</param>
            <returns>De-serialized headers.</returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.V1.Runtime.IServiceRemotingMessageHandler">
            <summary>
            Defines the interface that must be implemented by the ServiceRemotingListener to receive messages from the
            remoting transport.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V1.Runtime.IServiceRemotingMessageHandler.RequestResponseAsync(Microsoft.ServiceFabric.Services.Remoting.V1.Runtime.IServiceRemotingRequestContext,Microsoft.ServiceFabric.Services.Remoting.V1.ServiceRemotingMessageHeaders,System.Byte[])">
            <summary>
            Handles a message from the client that requires a response from the service.
            </summary>
            <param name="requestContext">Contains additional information about the request.</param>
            <param name="messageHeaders">The request message headers.</param>
            <param name="requestBody">The request message body.</param>
            <returns>The response body.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V1.Runtime.IServiceRemotingMessageHandler.HandleOneWay(Microsoft.ServiceFabric.Services.Remoting.V1.Runtime.IServiceRemotingRequestContext,Microsoft.ServiceFabric.Services.Remoting.V1.ServiceRemotingMessageHeaders,System.Byte[])">
            <summary>
            Handles a one way message from the client.
            </summary>
            <param name="requestContext">Contains additional information about the request.</param>
            <param name="messageHeaders">The request message headers.</param>
            <param name="requestBody">The request message body.</param>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.V1.Runtime.IServiceRemotingRequestContext">
            <summary>
            Defines the interface that must be implemented to provide the request context for the IServiceRemotingMessageHandler.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V1.Runtime.IServiceRemotingRequestContext.GetCallbackClient">
            <summary>
            Retrieves the client channel interface to use in cases where service wants to initiate calls to the client.
            </summary>
            <returns>The remoting callback client.</returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.V1.Runtime.ServiceRemotingDispatcher">
            <summary>
            Provides an implementation of <see cref="T:Microsoft.ServiceFabric.Services.Remoting.V1.Runtime.IServiceRemotingMessageHandler"/> that can dispatch
            messages to the service implementing <see cref="T:Microsoft.ServiceFabric.Services.Remoting.IService"/> interface.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V1.Runtime.ServiceRemotingDispatcher.#ctor(System.Fabric.ServiceContext,Microsoft.ServiceFabric.Services.Remoting.IService)">
            <summary>
            Instantiates the ServiceRemotingDispatcher that uses the given service context and
            dispatches messages to the given service implementation.
            </summary>
            <param name="serviceContext">Service context</param>
            <param name="service">Service implementation that implements interfaces of type <see cref="T:Microsoft.ServiceFabric.Services.Remoting.IService"/></param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V1.Runtime.ServiceRemotingDispatcher.RequestResponseAsync(Microsoft.ServiceFabric.Services.Remoting.V1.Runtime.IServiceRemotingRequestContext,Microsoft.ServiceFabric.Services.Remoting.V1.ServiceRemotingMessageHeaders,System.Byte[])">
            <summary>
            Handles a message from the client that requires a response from the service.
            </summary>
            <param name="requestContext">Request context - contains additional information about the request</param>
            <param name="messageHeaders">Request message headers</param>
            <param name="requestBody">Request message body</param>
            <returns>Response body</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V1.Runtime.ServiceRemotingDispatcher.HandleOneWay(Microsoft.ServiceFabric.Services.Remoting.V1.Runtime.IServiceRemotingRequestContext,Microsoft.ServiceFabric.Services.Remoting.V1.ServiceRemotingMessageHeaders,System.Byte[])">
            <summary>
            Handles a one way message from the client.
            </summary>
            <param name="requestContext">Request context - contains additional information about the request</param>
            <param name="messageHeaders">Request message headers</param>
            <param name="requestBody">Request message body</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V1.Runtime.ServiceRemotingDispatcher.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.V1.FabricTransport.Client.FabricTransportServiceRemotingClientFactory">
            <summary>
            An <see cref="T:Microsoft.ServiceFabric.Services.Remoting.V1.Client.IServiceRemotingClientFactory"/> that uses
            Fabric TCP transport to create <see cref="T:Microsoft.ServiceFabric.Services.Remoting.V1.Client.IServiceRemotingClient"/> that communicate with stateless
            and stateful services over interfaces that are remoted via 
            <see cref="T:Microsoft.ServiceFabric.Services.Remoting.V1.FabricTransport.Runtime.FabricTransportServiceRemotingListener"/>.
            </summary>
        </member>
        <member name="E:Microsoft.ServiceFabric.Services.Remoting.V1.FabricTransport.Client.FabricTransportServiceRemotingClientFactory.ClientConnected">
            <summary>
            Event handler that is fired when a client is connected to the service endpoint.
            </summary>
        </member>
        <member name="E:Microsoft.ServiceFabric.Services.Remoting.V1.FabricTransport.Client.FabricTransportServiceRemotingClientFactory.ClientDisconnected">
            <summary>
            Event handler that is fired when a client is disconnected from the service endpoint.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V1.FabricTransport.Client.FabricTransportServiceRemotingClientFactory.#ctor(Microsoft.ServiceFabric.Services.Remoting.FabricTransport.FabricTransportRemotingSettings,Microsoft.ServiceFabric.Services.Remoting.V1.IServiceRemotingCallbackClient,Microsoft.ServiceFabric.Services.Client.IServicePartitionResolver,System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Services.Communication.Client.IExceptionHandler},System.String)">
            <summary>
                Constructs a fabric transport based service remoting client factory.
            </summary>
            <param name="FabricTransportRemotingSettings">
                The settings for the fabric transport. If the settings are not provided or null, default settings 
                with no security.
            </param>
            <param name="callbackClient">
                The callback client that receives the callbacks from the service.
            </param>
            <param name="servicePartitionResolver">
                Service partition resolver to resolve the service endpoints. If not specified, a default 
                service partition resolver returned by <see cref="M:Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.GetDefault"/> is used.
            </param>
            <param name="exceptionHandlers">
                Exception handlers to handle the exceptions encountered in communicating with the service.
            </param>
            <param name="traceId">
                Id to use in diagnostics traces from this component.
            </param>
            <remarks>
                This factory uses an internal fabric transport exception handler to handle exceptions at the fabric TCP transport 
                level and a <see cref="T:Microsoft.ServiceFabric.Services.Remoting.Client.ServiceRemotingExceptionHandler"/>, in addition to the exception handlers supplied to the 
                constructor. 
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V1.FabricTransport.Client.FabricTransportServiceRemotingClientFactory.Microsoft#ServiceFabric#Services#Communication#Client#ICommunicationClientFactory{Microsoft#ServiceFabric#Services#Remoting#V1#Client#IServiceRemotingClient}#GetClientAsync(System.Uri,Microsoft.ServiceFabric.Services.Client.ServicePartitionKey,Microsoft.ServiceFabric.Services.Communication.Client.TargetReplicaSelector,System.String,Microsoft.ServiceFabric.Services.Communication.Client.OperationRetrySettings,System.Threading.CancellationToken)">
            <summary>
            Resolves a partition of the specified service containing one or more communication listeners and returns a client to communicate 
            to the endpoint corresponding to the given listenerName.
            The endpoint of the service is of the form - {"Endpoints":{"Listener1":"Endpoint1","Listener2":"Endpoint2" ...}}
            </summary>
            <param name="serviceUri">Uri of the service to resolve</param>
            <param name="partitionKey">Key that identifies the partition to resolve</param>
            <param name="targetReplicaSelector">Specifies which replica in the partition identified by the partition key, the client should connect to</param>
            <param name="listenerName">Specifies which listener in the endpoint of the chosen replica, to which the client should connect to</param>
            <param name="retrySettings">Specifies the retry policy that should be used for exceptions that occur when creating the client.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation. The result of the Task is
            the CommunicationClient(<see cref="T:Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClient" />) object.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V1.FabricTransport.Client.FabricTransportServiceRemotingClientFactory.Microsoft#ServiceFabric#Services#Communication#Client#ICommunicationClientFactory{Microsoft#ServiceFabric#Services#Remoting#V1#Client#IServiceRemotingClient}#GetClientAsync(System.Fabric.ResolvedServicePartition,Microsoft.ServiceFabric.Services.Communication.Client.TargetReplicaSelector,System.String,Microsoft.ServiceFabric.Services.Communication.Client.OperationRetrySettings,System.Threading.CancellationToken)">
            <summary>
            Re-resolves a partition of the specified service containing one or more communication listeners and returns a client to communicate 
            to the endpoint corresponding to the given listenerName.
            The endpoint of the service is of the form - {"Endpoints":{"Listener1":"Endpoint1","Listener2":"Endpoint2" ...}}
            </summary>
            <param name="previousRsp">Previous ResolvedServicePartition value</param>
            <param name="targetReplicaSelector">Specifies which replica in the partition identified by the partition key, the client should connect to</param>
            <param name="listenerName">Specifies which listener in the endpoint of the chosen replica, to which the client should connect to</param>
            <param name="retrySettings">Specifies the retry policy that should be used for exceptions that occur when creating the client.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation. The result of the Task is
            the CommunicationClient(<see cref="T:Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClient" />) object.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V1.FabricTransport.Client.FabricTransportServiceRemotingClientFactory.Microsoft#ServiceFabric#Services#Communication#Client#ICommunicationClientFactory{Microsoft#ServiceFabric#Services#Remoting#V1#Client#IServiceRemotingClient}#ReportOperationExceptionAsync(Microsoft.ServiceFabric.Services.Remoting.V1.Client.IServiceRemotingClient,Microsoft.ServiceFabric.Services.Communication.Client.ExceptionInformation,Microsoft.ServiceFabric.Services.Communication.Client.OperationRetrySettings,System.Threading.CancellationToken)">
            <summary>
            Handles the exceptions that occur in the CommunicationClient when sending a message to the Service
            </summary>
            <param name="client">Communication client</param>
            <param name="exceptionInformation">Information about exception that happened while communicating with the service.</param>
            <param name="retrySettings">Specifies the retry policy that should be used for handling the reported exception.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation. The result of the Task is
            a <see cref="T:Microsoft.ServiceFabric.Services.Communication.Client.OperationRetryControl" /> object that provides information on retry policy for this exception.
            </returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.V1.FabricTransport.Runtime.FabricTransportServiceRemotingListener">
            <summary>
                An <see cref="T:Microsoft.ServiceFabric.Services.Remoting.Runtime.IServiceRemotingListener"/> that uses
                fabric TCP transport to provide interface remoting for stateless and stateful services.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V1.FabricTransport.Runtime.FabricTransportServiceRemotingListener.#ctor(System.Fabric.ServiceContext,Microsoft.ServiceFabric.Services.Remoting.IService)">
            <summary>
                Constructs a fabric transport based service remoting listener with default
                <see cref="T:Microsoft.ServiceFabric.Services.Remoting.FabricTransport.Runtime.FabricTransportRemotingListenerSettings"/>.
            </summary>
            <param name="serviceContext">
                The context of the service for which the remoting listener is being constructed. 
            </param>
            <param name="serviceImplementation">
                The service implementation object used to construct <see cref="T:Microsoft.ServiceFabric.Services.Remoting.V1.Runtime.ServiceRemotingDispatcher"/>
                for message processing.
            </param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V1.FabricTransport.Runtime.FabricTransportServiceRemotingListener.#ctor(System.Fabric.ServiceContext,Microsoft.ServiceFabric.Services.Remoting.IService,System.String)">
            <summary>
                Constructs a fabric transport based service remoting listener with <see cref="T:Microsoft.ServiceFabric.Services.Remoting.FabricTransport.Runtime.FabricTransportRemotingListenerSettings"/>
                loaded from configuration section.
            </summary>
            <param name="serviceContext">
                The context of the service for which the remoting listener is being constructed.
            </param>
            <param name="serviceImplementation">
                The service implementation object used to construct <see cref="T:Microsoft.ServiceFabric.Services.Remoting.V1.Runtime.ServiceRemotingDispatcher"/>
                for message processing.
            </param>
            <param name="listenerSettingsConfigSectionName">
               The name of the configuration section in the configuration package named
               "Config" in the service manifest that defines the settings for the listener. 
            </param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V1.FabricTransport.Runtime.FabricTransportServiceRemotingListener.#ctor(System.Fabric.ServiceContext,Microsoft.ServiceFabric.Services.Remoting.IService,Microsoft.ServiceFabric.Services.Remoting.FabricTransport.Runtime.FabricTransportRemotingListenerSettings)">
            <summary>
                Constructs a fabric transport based service remoting listener with the specified
                <see cref="T:Microsoft.ServiceFabric.Services.Remoting.FabricTransport.Runtime.FabricTransportRemotingListenerSettings"/>.
            </summary>
            <param name="serviceContext">
                The context of the service for which the remoting listener is being constructed.
            </param>
            <param name="serviceImplementation">
                The service implementation object used to construct <see cref="T:Microsoft.ServiceFabric.Services.Remoting.V1.Runtime.ServiceRemotingDispatcher"/>
                for message processing.
            </param>
            <param name="listenerSettings">
                The settings for the listener.
            </param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V1.FabricTransport.Runtime.FabricTransportServiceRemotingListener.#ctor(System.Fabric.ServiceContext,Microsoft.ServiceFabric.Services.Remoting.V1.Runtime.IServiceRemotingMessageHandler)">
            <summary>
                Constructs a fabric transport based service remoting listener with default
                <see cref="T:Microsoft.ServiceFabric.Services.Remoting.FabricTransport.Runtime.FabricTransportRemotingListenerSettings"/>.
            </summary>
            <param name="serviceContext">
                The context of the service for which the remoting listener is being constructed.
            </param>
            <param name="messageHandler">
                The handler for processing remoting messages. As the messages are received,
                the listener delivers them to this handler.
            </param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V1.FabricTransport.Runtime.FabricTransportServiceRemotingListener.#ctor(System.Fabric.ServiceContext,Microsoft.ServiceFabric.Services.Remoting.V1.Runtime.IServiceRemotingMessageHandler,System.String)">
            <summary>
                Constructs a fabric transport based service remoting listener with <see cref="T:Microsoft.ServiceFabric.Services.Remoting.FabricTransport.Runtime.FabricTransportRemotingListenerSettings"/>
                loaded from configuration section.
            </summary>
            <param name="serviceContext">
                The context of the service for which the remoting listener is being constructed.
            </param>
            <param name="messageHandler">
                The handler for processing remoting messages. As the messages are received,
                the listener delivers them to this handler.
            </param>
            <param name="listenerSettingsConfigSectionName">
               The name of the configuration section in the configuration package named
               "Config" in the service manifest that defines the settings for the listener. 
            </param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V1.FabricTransport.Runtime.FabricTransportServiceRemotingListener.#ctor(System.Fabric.ServiceContext,Microsoft.ServiceFabric.Services.Remoting.V1.Runtime.IServiceRemotingMessageHandler,Microsoft.ServiceFabric.Services.Remoting.FabricTransport.Runtime.FabricTransportRemotingListenerSettings)">
            <summary>
                Constructs a fabric transport based service remoting listener with the specified
                <see cref="T:Microsoft.ServiceFabric.Services.Remoting.FabricTransport.Runtime.FabricTransportRemotingListenerSettings"/>.
            </summary>
            <param name="serviceContext">
                The context of the service for which the remoting listener is being constructed.
            </param>
            <param name="messageHandler">
                The handler for processing remoting messages. As the messages are received,
                the listener delivers them to this handler.
            </param>
            <param name="listenerSettings">
                The settings to use for the listener.
            </param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V1.FabricTransport.Runtime.FabricTransportServiceRemotingListener.Microsoft#ServiceFabric#Services#Communication#Runtime#ICommunicationListener#OpenAsync(System.Threading.CancellationToken)">
            <summary>
            This method causes the communication listener to be opened. Once the Open
            completes, the communication listener becomes usable - accepts and sends messages.
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation. The result of the Task is
            the endpoint string.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V1.FabricTransport.Runtime.FabricTransportServiceRemotingListener.Microsoft#ServiceFabric#Services#Communication#Runtime#ICommunicationListener#CloseAsync(System.Threading.CancellationToken)">
            <summary>
            This method causes the communication listener to close. Close is a terminal state and 
            this method allows the communication listener to transition to this state in a
            graceful manner.
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V1.FabricTransport.Runtime.FabricTransportServiceRemotingListener.Microsoft#ServiceFabric#Services#Communication#Runtime#ICommunicationListener#Abort">
            <summary>
            This method causes the communication listener to close. Close is a terminal state and
            this method causes the transition to close ungracefully. Any outstanding operations
            (including close) should be canceled when this method is called.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.Client.ServiceRemotingExceptionHandler">
            <summary>
            Provides handling of exceptions encountered in communicating with 
            a service fabric service over remoted interfaces. 
            </summary>
            <remarks>
            The exceptions are handled as per the description below:
            <list type="table">
            <item>
            <description>
                The following exceptions indicate service failover. These exceptions are handled by returning <see cref="T:Microsoft.ServiceFabric.Services.Communication.Client.ExceptionHandlingRetryResult"/> from the 
                <see cref="M:Microsoft.ServiceFabric.Services.Communication.Client.IExceptionHandler.TryHandleException(Microsoft.ServiceFabric.Services.Communication.Client.ExceptionInformation,Microsoft.ServiceFabric.Services.Communication.Client.OperationRetrySettings,Microsoft.ServiceFabric.Services.Communication.Client.ExceptionHandlingResult@)"/> method.
                The <see cref="P:Microsoft.ServiceFabric.Services.Communication.Client.ExceptionHandlingRetryResult.IsTransient"/> property of the <see cref="T:Microsoft.ServiceFabric.Services.Communication.Client.ExceptionHandlingRetryResult"/> is set to false, 
                the <see cref="P:Microsoft.ServiceFabric.Services.Communication.Client.ExceptionHandlingRetryResult.RetryDelay"/>  property is set to a random value up to <see cref="P:Microsoft.ServiceFabric.Services.Communication.Client.OperationRetrySettings.MaxRetryBackoffIntervalOnNonTransientErrors"/> 
                and <see cref="P:Microsoft.ServiceFabric.Services.Communication.Client.ExceptionHandlingRetryResult.MaxRetryCount"/> property is set to <see cref="F:System.Int32.MaxValue"/>.
                <list type="bullet">
                    <item><description><see cref="T:System.Fabric.FabricNotPrimaryException"/>, when the target replica is <see cref="F:Microsoft.ServiceFabric.Services.Communication.Client.TargetReplicaSelector.PrimaryReplica"/>.</description></item>
                    <item><description><see cref="T:System.Fabric.FabricNotReadableException"/></description> </item>
                </list>
            </description>
            </item>
            <item>
            <description>
                The following exceptions indicate transient error conditions and handled by returning <see cref="T:Microsoft.ServiceFabric.Services.Communication.Client.ExceptionHandlingRetryResult"/> from the 
                <see cref="M:Microsoft.ServiceFabric.Services.Communication.Client.IExceptionHandler.TryHandleException(Microsoft.ServiceFabric.Services.Communication.Client.ExceptionInformation,Microsoft.ServiceFabric.Services.Communication.Client.OperationRetrySettings,Microsoft.ServiceFabric.Services.Communication.Client.ExceptionHandlingResult@)"/> method.
                The <see cref="P:Microsoft.ServiceFabric.Services.Communication.Client.ExceptionHandlingRetryResult.IsTransient"/> property of the <see cref="T:Microsoft.ServiceFabric.Services.Communication.Client.ExceptionHandlingRetryResult"/> is set to true, 
                the <see cref="P:Microsoft.ServiceFabric.Services.Communication.Client.ExceptionHandlingRetryResult.RetryDelay"/>  property is set to a random value up to <see cref="P:Microsoft.ServiceFabric.Services.Communication.Client.OperationRetrySettings.MaxRetryBackoffIntervalOnTransientErrors"/> 
                and <see cref="P:Microsoft.ServiceFabric.Services.Communication.Client.ExceptionHandlingRetryResult.MaxRetryCount"/> property is set to <see cref="F:System.Int32.MaxValue"/>.
                <list type="bullet">
                    <item><description><see cref="T:System.Fabric.FabricTransientException"/></description> </item>
                </list>
            </description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.Client.ServiceRemotingExceptionHandler.#ctor">
            <summary>
            Constructs a ServiceRemotingExceptionHandler with a default trace ID.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.Client.ServiceRemotingExceptionHandler.#ctor(System.String)">
            <summary>
            Constructs a ServiceRemotingExceptionHandler with a specified trace ID.
            </summary>
            <param name="traceId">
                The ID to use in diagnostics traces from this component.
            </param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.Client.ServiceRemotingExceptionHandler.Microsoft#ServiceFabric#Services#Communication#Client#IExceptionHandler#TryHandleException(Microsoft.ServiceFabric.Services.Communication.Client.ExceptionInformation,Microsoft.ServiceFabric.Services.Communication.Client.OperationRetrySettings,Microsoft.ServiceFabric.Services.Communication.Client.ExceptionHandlingResult@)">
            <summary>
            Examines the exception and determines how that exception can be handled. 
            </summary>
            <param name="exceptionInformation">The information about the exception.</param>
            <param name="retrySettings">The operation retry preferences.</param>
            <param name="result">The result of the exception handling.</param>
            <returns>true if the exception is handled; otherwise, false.</returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.Client.IServiceProxy">
            <summary>
            This is the base Client side interface for Remoting. The framework provides the
            Remoting infrastructure for all the service contracts inheriting from IService through
            ServiceRemotingListener and ServiceProxy.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Remoting.Client.IServiceProxy.ServiceInterfaceType">
            <summary>
            The interface type that is being remoted.
            </summary>
            <value>Service interface type</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Remoting.Client.IServiceProxy.ServicePartitionClient">
            <summary>
            The service partition client used to send requests to the service.
            </summary>
            <value>ServicePartitionClient used by the ServiceProxy</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Remoting.Client.IServiceProxy.ServicePartitionClient2">
            <summary>
            The service partition client used to send requests to the service.
            </summary>
            <value>ServicePartitionClient used by the ServiceProxy</value>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.Client.IServiceProxyFactory">
            <summary>
            Specifies the interface for the factory that creates proxies for remote communication to the specified service.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.Client.IServiceProxyFactory.CreateServiceProxy``1(System.Uri,Microsoft.ServiceFabric.Services.Client.ServicePartitionKey,Microsoft.ServiceFabric.Services.Communication.Client.TargetReplicaSelector,System.String)">
            <summary>
            Creates a proxy to communicate to the specified service using the remoted interface TServiceInterface that 
            the service implements.
            <typeparam name="TServiceInterface">The interface that is being remoted.</typeparam>
            <param name="serviceUri">The Uri of the Service.</param>
            <param name="partitionKey">The Partition key that determines which service partition is responsible for handling requests from this service proxy.</param>
            <param name="targetReplicaSelector">Determines which replica or instance of the service partition the client should connect to.</param>
            <param name="listenerName">This parameter is Optional if the service has a single communication listener. The endpoints from the service
            are of the form {"Endpoints":{"Listener1":"Endpoint1","Listener2":"Endpoint2" ...}}. When the service exposes multiple endpoints, this parameter
            identifies which of those endpoints to use for the remoting communication.
            </param>
            <returns>The proxy that implement the interface that is being remoted. The returned object also implement IServiceProxy interface.</returns>
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.Client.ServiceProxy">
            <summary>
            Provides the base implementation for the proxy to the remoted IService interfaces.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Remoting.Client.ServiceProxy.ServiceInterfaceType">
            <summary>
            The interface type that is being remoted.
            </summary>
            <value>Service interface type</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Remoting.Client.ServiceProxy.ServicePartitionClient">
            <summary>
            The V1 Service partition client used to send requests to the service.
            </summary>
            <value>ServicePartitionClient used by the ServiceProxy</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Remoting.Client.ServiceProxy.ServicePartitionClient2">
            <summary>
            The V2 Service partition client used to send requests to the service.
            </summary>
            <value>ServicePartitionClient used by the ServiceProxy</value>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.Client.ServiceProxy.Create``1(System.Uri,Microsoft.ServiceFabric.Services.Client.ServicePartitionKey,Microsoft.ServiceFabric.Services.Communication.Client.TargetReplicaSelector,System.String)">
            <summary>
            Creates a proxy to communicate to the specified service using the remoted interface TServiceInterface that 
            the service implements.
            <typeparam name="TServiceInterface">Interface that is being remoted</typeparam>
            <param name="serviceUri">Uri of the Service.</param>
            <param name="partitionKey">The Partition key that determines which service partition is responsible for handling requests from this service proxy</param>
            <param name="targetReplicaSelector">Determines which replica or instance of the service partition the client should connect to.</param>
            <param name="listenerName">This parameter is Optional if the service has a single communication listener. The endpoints from the service
            are of the form {"Endpoints":{"Listener1":"Endpoint1","Listener2":"Endpoint2" ...}}. When the service exposes multiple endpoints, this parameter
            identifies which of those endpoints to use for the remoting communication.
            </param>
            <returns>The proxy that implement the interface that is being remoted. The returned object also implement <see cref="T:Microsoft.ServiceFabric.Services.Remoting.Client.IServiceProxy"/> interface.</returns>
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.Client.ServiceProxyFactory">
            <summary>
            Specifies the factory that creates proxies for remote communication to the specified service.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.Client.ServiceProxyFactory.#ctor(Microsoft.ServiceFabric.Services.Communication.Client.OperationRetrySettings)">
            <summary>
            Instantiates the ServiceProxyFactory with the specified retrysettings and default remotingClientFactory
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.Client.ServiceProxyFactory.#ctor(System.Func{Microsoft.ServiceFabric.Services.Remoting.V1.IServiceRemotingCallbackClient,Microsoft.ServiceFabric.Services.Remoting.V1.Client.IServiceRemotingClientFactory},Microsoft.ServiceFabric.Services.Communication.Client.OperationRetrySettings)">
            <summary>
            Instantiates the ServiceProxyFactory with the specified V1 remoting factory and retrysettings.
            </summary>
            <param name="createServiceRemotingClientFactory">
            Specifies the factory method that creates the remoting client factory. The remoting client factory got from this method
            is cached in the ServiceProxyFactory.
            </param>
            <param name="retrySettings">Specifies the retry policy to use on exceptions seen when using the proxies created by this factory</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.Client.ServiceProxyFactory.#ctor(System.Func{Microsoft.ServiceFabric.Services.Remoting.V2.Client.IServiceRemotingCallbackMessageHandler,Microsoft.ServiceFabric.Services.Remoting.V2.Client.IServiceRemotingClientFactory},Microsoft.ServiceFabric.Services.Communication.Client.OperationRetrySettings)">
            <summary>
            Instantiates the ServiceProxyFactory with the specified V2 remoting factory and retrysettings.
            </summary>
            <param name="createServiceRemotingClientFactory">
            Specifies the factory method that creates the remoting client factory. The remoting client factory got from this method
            is cached in the ServiceProxyFactory.
            </param>
            <param name="retrySettings">Specifies the retry policy to use on exceptions seen when using the proxies created by this factory</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.Client.ServiceProxyFactory.CreateServiceProxy``1(System.Uri,Microsoft.ServiceFabric.Services.Client.ServicePartitionKey,Microsoft.ServiceFabric.Services.Communication.Client.TargetReplicaSelector,System.String)">
            <summary>
            Creates a proxy to communicate to the specified service using the remoted interface TServiceInterface that 
            the service implements.
            <typeparam name="TServiceInterface">Interface that is being remoted</typeparam>
            <param name="serviceUri">Uri of the Service.</param>
            <param name="partitionKey">The Partition key that determines which service partition is responsible for handling requests from this service proxy</param>
            <param name="targetReplicaSelector">Determines which replica or instance of the service partition the client should connect to.</param>
            <param name="listenerName">This parameter is Optional if the service has a single communication listener. The endpoints from the service
            are of the form {"Endpoints":{"Listener1":"Endpoint1","Listener2":"Endpoint2" ...}}. When the service exposes multiple endpoints, this parameter
            identifies which of those endpoints to use for the remoting communication.
            </param>
            <returns>The proxy that implement the interface that is being remoted. The returned object also implement <see cref="T:Microsoft.ServiceFabric.Services.Remoting.Client.IServiceProxy"/> interface.</returns>
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.Client.ServiceProxyFactory.CreateNonIServiceProxy``1(System.Uri,Microsoft.ServiceFabric.Services.Client.ServicePartitionKey,Microsoft.ServiceFabric.Services.Communication.Client.TargetReplicaSelector,System.String)">
            <summary>
            Creates a proxy  to communicate to the specified service using the remoted interface TServiceInterface that 
            the service implements.
            <typeparam name="TServiceInterface">Interface that is being remoted . Service Interface does not need to be inherited from IService.</typeparam>
            <param name="serviceUri">Uri of the Service.</param>
            <param name="partitionKey">The Partition key that determines which service partition is responsible for handling requests from this service proxy</param>
            <param name="targetReplicaSelector">Determines which replica or instance of the service partition the client should connect to.</param>
            <param name="listenerName">This parameter is Optional if the service has a single communication listener. The endpoints from the service
            are of the form {"Endpoints":{"Listener1":"Endpoint1","Listener2":"Endpoint2" ...}}. When the service exposes multiple endpoints, this parameter
            identifies which of those endpoints to use for the remoting communication.
            </param>
            <returns>The proxy that implement the interface that is being remoted. The returned object also implement <see cref="T:Microsoft.ServiceFabric.Services.Remoting.Client.IServiceProxy"/> interface.</returns>
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.IService">
            <summary>
            Defines the marker interface for enabling interface Remoting for services. 
            An <see cref="T:Microsoft.ServiceFabric.Services.Remoting.Runtime.IServiceRemotingListener"/> provides remoting 
            for all interfaces implemented by the service that derive from this interface. The remoted interfaces can be 
            accessed via <see cref="T:Microsoft.ServiceFabric.Services.Remoting.Client.IServiceProxy"/> on the client side.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.Runtime.IServiceRemotingListener">
            <summary>
            Defines a base communication interface that enables interface remoting for 
            stateless and stateful services.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.Runtime.ServiceRemotingCancellationHelper">
            <summary>
            Provides cancellation support for remote method dispatching.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.Runtime.ServiceRemotingCancellationTracker">
            <summary>
            Maintains cancellation tokens associated with the method calls being dispatched.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Services.Remoting.Runtime.ServiceRemotingCancellationTracker.methodCallTrackerDictionary">
            <summary>
            Maintains the information about the method calls that are in-flight.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.Runtime.ServiceRemotingCancellationTracker.GetOrAddCancellationTokenSource(System.Int32,System.String)">
            <summary>
            Returns the cancellation token associated with the specified callId. A new token one is created if the
            callId is not tracked already.
            </summary>
            <param name="methodId">The method ID.</param>
            <param name="callId">The call ID.</param>
            <returns>The cancellation token.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.Runtime.ServiceRemotingCancellationTracker.TryGetCancellationTokenSource(System.Int32,System.String)">
            <summary>
            Gets a cancellation token if it exists for the specified callId.
            </summary>
            <param name="methodId">The method ID.</param>
            <param name="callId">The call ID.</param>
            <returns>The cancellation token.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.Runtime.ServiceRemotingCancellationTracker.TryRemoveCancellationTokenSource(System.Int32,System.String)">
            <summary>
            Removes the cancellation token associated with the callId specified.
            </summary>
            <param name="methodId">The method ID.</param>
            <param name="callId">The call ID.</param>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.Runtime.ServiceRemotingCancellationTracker.MethodCallTracker">
            <summary>
            Maintains the information related to the currently inflight calls for a service Method - identified by the methodId property.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.Runtime.ServiceRemotingCancellationTracker.MethodCallTracker.TryRemoveCancellationToken(System.String)">
            <summary>
            Removes the cancellation token with a specified callID..
            </summary>
            <param name="callId">The method call identifier.</param>
            <returns>The cancellation token.</returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.Runtime.CancellationTokenResult">
            <summary>
            Represents wrapper object that is used to get the result of querying the cancellation token for a
            particular method call via Async api's.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.Runtime.ServiceRemotingExtensions">
            <summary>
            This class adds extensions methods to create <see cref="T:Microsoft.ServiceFabric.Services.Remoting.Runtime.IServiceRemotingListener"/>
            for remoting methods of the service interfaces that are derived from 
            <see cref="T:Microsoft.ServiceFabric.Services.Remoting.IService"/> interface.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.Runtime.ServiceRemotingExtensions.CreateServiceRemotingListener``1(``0,System.Fabric.StatefulServiceContext)">
            <summary>
            An extension method that creates an <see cref="T:Microsoft.ServiceFabric.Services.Remoting.Runtime.IServiceRemotingListener"/>
            for a stateful service implementation. This is deprecated implementation. Use this Api CreateServiceRemotingReplicaListeners instead
            </summary>
            <typeparam name="TStatefulService">Type constraint on the service implementation. The service implementation must
            derive from <see cref="T:Microsoft.ServiceFabric.Services.Runtime.StatefulServiceBase"/> and implement one or more
            interfaces that derive from <see cref="T:Microsoft.ServiceFabric.Services.Remoting.IService"/> interface.</typeparam>
            <param name="serviceImplementation">A stateful service implementation.</param>
            <param name="serviceContext">The context under which the service is operating.</param>
            <returns>A <see cref="T:Microsoft.ServiceFabric.Services.Remoting.Runtime.IServiceRemotingListener"/> communication
            listener that remotes the interfaces deriving from <see cref="T:Microsoft.ServiceFabric.Services.Remoting.IService"/> interface.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.Runtime.ServiceRemotingExtensions.CreateServiceRemotingListener``1(``0,System.Fabric.StatelessServiceContext)">
            <summary>
            An extension method that creates an <see cref="T:Microsoft.ServiceFabric.Services.Remoting.Runtime.IServiceRemotingListener"/>
            for a stateless service implementation.This is deprecated implementation. Use CreateServiceRemotingInstanceListeners Api instead.
            </summary>
            <typeparam name="TStatelessService">Type constraint on the service implementation. The service implementation must
            derive from <see cref="T:System.Fabric.Query.StatelessService"/> and implement one or more
            interfaces that derive from <see cref="T:Microsoft.ServiceFabric.Services.Remoting.IService"/> interface.</typeparam>
            <param name="serviceImplementation">A stateless service implementation.</param>
            <param name="serviceContext">The context under which the service is operating.</param>
            <returns>A <see cref="T:Microsoft.ServiceFabric.Services.Remoting.Runtime.IServiceRemotingListener"/> communication
            listener that remotes the interfaces deriving from <see cref="T:Microsoft.ServiceFabric.Services.Remoting.IService"/> interface.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.Runtime.ServiceRemotingExtensions.CreateServiceRemotingReplicaListeners``1(``0)">
             <summary>
             An extension method that creates an <see cref="T:Microsoft.ServiceFabric.Services.Remoting.Runtime.IServiceRemotingListener"/>
             for a stateful service implementation.
             <typeparam name="TStatefulService">Type constraint on the service implementation. The service implementation must
             derive from <see cref="T:Microsoft.ServiceFabric.Services.Runtime.StatefulServiceBase"/> and implement one or more
             interfaces that derive from <see cref="T:Microsoft.ServiceFabric.Services.Remoting.IService"/> interface.</typeparam>
            </summary>
             <param name="serviceImplementation">A stateful service implementation.</param>
             <returns>A <see cref="T:Microsoft.ServiceFabric.Services.Remoting.Runtime.IServiceRemotingListener"/> communication
             listener that remotes the interfaces deriving from <see cref="T:Microsoft.ServiceFabric.Services.Remoting.IService"/> interface.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.Runtime.ServiceRemotingExtensions.CreateServiceRemotingInstanceListeners``1(``0)">
            <summary>
            An extension method that creates an <see cref="T:Microsoft.ServiceFabric.Services.Remoting.Runtime.IServiceRemotingListener"/>
            for a stateless service implementation.
            </summary>
            <typeparam name="TStatelessService">Type constraint on the service implementation. The service implementation must
            derive from <see cref="T:System.Fabric.Query.StatelessService"/> and implement one or more
            interfaces that derive from <see cref="T:Microsoft.ServiceFabric.Services.Remoting.IService"/> interface.</typeparam>
            <param name="serviceImplementation">A stateless service implementation.</param>
            <returns>A <see cref="T:Microsoft.ServiceFabric.Services.Remoting.Runtime.IServiceRemotingListener"/> communication
            listener that remotes the interfaces deriving from <see cref="T:Microsoft.ServiceFabric.Services.Remoting.IService"/> interface.</returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.Runtime.ServiceTypeInformation">
            <summary>
            Specifies the class used by the ServiceRemoting to lookup the interfaces implemented
            by the service.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.Runtime.ServiceTypeInformation.#ctor">
            <summary>
            Initializes a new instance of the ServiceTypeInformation class.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Remoting.Runtime.ServiceTypeInformation.InterfaceTypes">
            <summary>
            Gets or sets the interface types implemented.
            </summary>
            <value>List of interface types</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Remoting.Runtime.ServiceTypeInformation.ImplementationType">
            <summary>
            Gets or sets the type of the class implementing the service interface.
            </summary>
            <value><see cref="T:System.Type"/> of the class implementing the service interface.</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Remoting.Runtime.ServiceTypeInformation.IsAbstract">
            <summary>
            Gets or sets if class implementing service interface is abstract.
            </summary>
            <value>true if class implementing service interface is abstract, otherwise false.</value>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.Runtime.ServiceTypeInformation.TryGet(System.Type,Microsoft.ServiceFabric.Services.Remoting.Runtime.ServiceTypeInformation@)">
            <summary>
            Gets the Factory method that constructs a ServiceTypeInformation object from the given type.
            </summary>
            <param name="serviceType">Type to examine</param>
            <param name="serviceTypeInformation">The constructed ServiceTypeInformation</param>
            <returns>true if the specified serviceType is a service, false otherwise</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.Runtime.ServiceTypeInformation.Get(System.Type)">
            <summary>
            Factory method that constructs a ServiceTypeInformation object from the given type
            </summary>
            <param name="serviceType">Type to examine</param>
            <returns>ServiceTypeInformation</returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.SR">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Remoting.SR.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Remoting.SR.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Remoting.SR.Error_InvalidOperation">
            <summary>
              Looks up a localized string similar to Invalid Client for remoting..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Remoting.SR.ErrorClientCallbackChannelNotFound">
            <summary>
              Looks up a localized string similar to CallBack Channel Not Found for this ClientId  : &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Remoting.SR.ErrorDeserializationFailure">
            <summary>
              Looks up a localized string similar to Failed to deserialize and get remote exception  {0}.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Remoting.SR.ErrorExceptionSerializationFailed1">
            <summary>
              Looks up a localized string similar to The exception {0} was unhandled on the service and could not be serialized for transferring to the client..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Remoting.SR.ErrorExceptionSerializationFailed2">
            <summary>
              Looks up a localized string similar to Detailed Remote Exception Information: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Remoting.SR.ErrorHeaderAlreadyExists">
            <summary>
              Looks up a localized string similar to Header with name &apos;{0}&apos; already exists.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Remoting.SR.ErrorInterfaceNotImplemented">
            <summary>
              Looks up a localized string similar to Interface id &apos;{0}&apos; is not implemented by object &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Remoting.SR.ErrorInvalidAddress">
            <summary>
              Looks up a localized string similar to Client is trying to connect to invalid address {0}..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Remoting.SR.ErrorMethodNotImplemented">
            <summary>
              Looks up a localized string similar to The object of type &apos;{0}&apos; does support the method &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Remoting.SR.ErrorNoServiceInterfaceFound">
            <summary>
              Looks up a localized string similar to The service type &apos;{0}&apos; does not implement any service interfaces or one of the interfaces implemented is not a service interface. All interfaces(including its parent interface) implemented by service type must be service interface. A service interface is the one that ultimately derives from &apos;{1}&apos; type..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Remoting.SR.ErrorNotAServiceInterface_DerivationCheck1">
            <summary>
              Looks up a localized string similar to The type &apos;{0}&apos; is not an service interface as it does not derive from the interface &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Remoting.SR.ErrorNotAServiceInterface_DerivationCheck2">
            <summary>
              Looks up a localized string similar to The type &apos;{0}&apos; is not an service interface as it derive from a non service interface &apos;{1}&apos;. All service interfaces must derive from &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Remoting.SR.ErrorNotAServiceInterface_InterfaceCheck">
            <summary>
              Looks up a localized string similar to The type &apos;{0}&apos; is not a service interface as it is not an interface. .
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Remoting.SR.ErrorRemotedInterfaceIsGeneric">
            <summary>
              Looks up a localized string similar to The  {0} interface &apos;{1}&apos; is using generics. Generic interfaces cannot be remoted..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Remoting.SR.ErrorRemotedMethodCancellationTokenOutOfOrder">
            <summary>
              Looks up a localized string similar to Method &apos;{1}&apos; of {0} interface &apos;{2}&apos; has &apos;{4}&apos; parameter &apos;{3}&apos;, and it is not the last parameter. If a method of the {0} interface has parameter of type &apos;{4}&apos; it must be the last parameter..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Remoting.SR.ErrorRemotedMethodDoesNotReturnTask">
            <summary>
              Looks up a localized string similar to Method &apos;{1}&apos; of {0} interface &apos;{2}&apos; does not return Task or Task&lt;&gt;. The {0} interface methods must be async and must return either Task or Task&lt;&gt;..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Remoting.SR.ErrorRemotedMethodDoesNotReturnVoid">
            <summary>
              Looks up a localized string similar to Method &apos;{1}&apos; of {0} interface &apos;{2}&apos; returns &apos;{3}&apos;. The {0} interface methods must have a return of type &apos;{4}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Remoting.SR.ErrorRemotedMethodHasGenerics">
            <summary>
              Looks up a localized string similar to Method &apos;{1}&apos; of {0} interface &apos;{2}&apos; is using generics. The {0} interface methods cannot use generics..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Remoting.SR.ErrorRemotedMethodHasOutRefOptionalParameter">
            <summary>
              Looks up a localized string similar to Method &apos;{1}&apos; of {0} interface &apos;{2}&apos; has out/ref/optional parameter &apos;{3}&apos;. The {0} interface methods must not have out, ref or optional parameters..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Remoting.SR.ErrorRemotedMethodHasVaArgParameter">
            <summary>
              Looks up a localized string similar to Method &apos;{1}&apos; of {0} interface &apos;{2}&apos; has variable length parameter &apos;{3}&apos;. The {0} interface methods must not have variable length parameters..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Remoting.SR.ErrorRemotedMethodHasVaArgs">
            <summary>
              Looks up a localized string similar to Method &apos;{1}&apos; of {0} interface &apos;{2}&apos; is using a variable argument list. The {0} interface methods cannot have a variable argument list..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Remoting.SR.ErrorRemotedMethodsIsOverloaded">
            <summary>
              Looks up a localized string similar to Method &apos;{1}&apos; of {0} interface &apos;{2}&apos; is overloaded. The {0} interface methods cannot be overloaded..
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.V2.Builder.MethodDispatcherBase">
            <summary>
            This class dispatches requests from the client to the interface/method of the remoted object.
            This class is used by remoting code generator.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V2.Builder.MethodDispatcherBase.CreateResponseMessageBody(System.String,System.String,Microsoft.ServiceFabric.Services.Remoting.V2.IServiceRemotingMessageBodyFactory,System.Object)">
            <summary>
            This method is used ti create the remoting response from the specified return value 
            </summary>
            <param name="interfaceName"></param>
            <param name="methodName"></param>
            <param name="remotingMessageBodyFactory"></param>
            <param name="response"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V2.Builder.MethodDispatcherBase.DispatchAsync(System.Object,System.Int32,Microsoft.ServiceFabric.Services.Remoting.V2.IServiceRemotingRequestMessageBody,Microsoft.ServiceFabric.Services.Remoting.V2.IServiceRemotingMessageBodyFactory,System.Threading.CancellationToken)">
             setting at class level?. Since we cache MethodDispatcher for each interface , 
             we can't set IServiceRemotingMessageBodyFactory at class level .
             These can be cases where multiple IServiceRemotingMessageBodyFactory implmenetation
              but single dispatcher class .
             <summary>
            This method is used to dispatch request to the specified methodId of the 
             interface implemented by the remoted object.
             </summary>
             <param name="objectImplementation"></param>
             <param name="methodId"></param>
             <param name="requestBody"></param>
             <param name="remotingMessageBodyFactory"></param>
             <param name="cancellationToken"></param>
             <returns></returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V2.Builder.MethodDispatcherBase.Dispatch(System.Object,System.Int32,Microsoft.ServiceFabric.Services.Remoting.V2.IServiceRemotingRequestMessageBody)">
            <summary>
            This method is used to dispatch one way messages to the specified methodId of the 
            interface implemented by the remoted object.
            </summary>
            <param name="objectImplementation"></param>
            <param name="methodId"></param>
            <param name="requestMessageBody"></param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V2.Builder.MethodDispatcherBase.OnDispatchAsync(System.Int32,System.Object,Microsoft.ServiceFabric.Services.Remoting.V2.IServiceRemotingRequestMessageBody,Microsoft.ServiceFabric.Services.Remoting.V2.IServiceRemotingMessageBodyFactory,System.Threading.CancellationToken)">
            <summary>
            This method is implemented by the generated method dispatcher to dispatch request to the specified methodId of the 
            interface implemented by the remoted object.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V2.Builder.MethodDispatcherBase.OnDispatch(System.Int32,System.Object,Microsoft.ServiceFabric.Services.Remoting.V2.IServiceRemotingRequestMessageBody)">
            <summary>
            This method is implemented by the generated method dispatcher to dispatch one way messages to the specified methodId of the 
            interface implemented by the remoted object.
            </summary>
            <param name="methodId"></param>
            <param name="remotedObject"></param>
            <param name="requestBody"></param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V2.Builder.MethodDispatcherBase.DispatchAsync(System.Object,System.Int32,System.Object,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V2.Builder.MethodDispatcherBase.Dispatch(System.Object,System.Int32,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V2.Builder.MethodDispatcherBase.ContinueWithResult``1(System.String,System.String,Microsoft.ServiceFabric.Services.Remoting.V2.IServiceRemotingMessageBodyFactory,System.Threading.Tasks.Task{``0})">
            <summary>
            Internal - used by Service remoting
            </summary>
            <param name="methodName"></param>
            <param name="remotingMessageBodyFactory"></param>
            <param name="task">continuation task</param>
            <param name="interfaceName"></param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation.
            </returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.V2.Builder.ServiceCodeBuilder">
            <summary>
            Singelton Class for Codegen
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.V2.Client.IServiceRemotingCallbackMessageHandler">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V2.Client.IServiceRemotingCallbackMessageHandler.HandleOneWayMessage(Microsoft.ServiceFabric.Services.Remoting.V2.IServiceRemotingRequestMessage)">
            <summary>
            
            </summary>
            <param name="requestMessage"></param>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.V2.Client.IServiceRemotingClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V2.Client.IServiceRemotingClient.RequestResponseAsync(Microsoft.ServiceFabric.Services.Remoting.V2.IServiceRemotingRequestMessage)">
            <summary>
            
            </summary>
            <param name="requestRequestMessage"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V2.Client.IServiceRemotingClient.SendOneWay(Microsoft.ServiceFabric.Services.Remoting.V2.IServiceRemotingRequestMessage)">
            <summary>
            
            </summary>
            <param name="requestMessage"></param>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.V2.Client.IServiceRemotingClientFactory">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V2.Client.IServiceRemotingClientFactory.GetRemotingMessageBodyFactory">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.V2.Client.IServiceRemotingPartitionClient">
            <summary>
            Defines the interface for the client that communicate over remoting to a particular replica of a service partition.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.V2.Client.ServiceProxyFactory">
            <summary>
            Specifies the factory that creates proxies for remote communication to the specified service.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V2.Client.ServiceProxyFactory.#ctor(System.Func{Microsoft.ServiceFabric.Services.Remoting.V2.Client.IServiceRemotingCallbackMessageHandler,Microsoft.ServiceFabric.Services.Remoting.V2.Client.IServiceRemotingClientFactory},Microsoft.ServiceFabric.Services.Communication.Client.OperationRetrySettings)">
            <summary>
            Instantiates the ServiceProxyFactory with the specified remoting factory and retrysettings.
            </summary>
            <param name="createServiceRemotingClientFactory">
            Specifies the factory method that creates the remoting client factory. The remoting client factory got from this method
            is cached in the ServiceProxyFactory.
            </param>
            <param name="retrySettings">Specifies the retry policy to use on exceptions seen when using the proxies created by this factory</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V2.Client.ServiceProxyFactory.CreateServiceProxy``1(System.Uri,Microsoft.ServiceFabric.Services.Client.ServicePartitionKey,Microsoft.ServiceFabric.Services.Communication.Client.TargetReplicaSelector,System.String)">
            <summary>
            Creates a proxy to communicate to the specified service using the remoted interface TServiceInterface that 
            the service implements.
            <typeparam name="TServiceInterface">Interface that is being remoted</typeparam>
            <param name="serviceUri">Uri of the Service.</param>
            <param name="partitionKey">The Partition key that determines which service partition is responsible for handling requests from this service proxy</param>
            <param name="targetReplicaSelector">Determines which replica or instance of the service partition the client should connect to.</param>
            <param name="listenerName">This parameter is Optional if the service has a single communication listener. The endpoints from the service
            are of the form {"Endpoints":{"Listener1":"Endpoint1","Listener2":"Endpoint2" ...}}. When the service exposes multiple endpoints, this parameter
            identifies which of those endpoints to use for the remoting communication.
            </param>
            <returns>The proxy that implement the interface that is being remoted. The returned object also implement <see cref="T:Microsoft.ServiceFabric.Services.Remoting.Client.IServiceProxy"/> interface.</returns>
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V2.Client.ServiceProxyFactory.CreateNonIServiceProxy``1(System.Uri,Microsoft.ServiceFabric.Services.Client.ServicePartitionKey,Microsoft.ServiceFabric.Services.Communication.Client.TargetReplicaSelector,System.String)">
            <summary>
            Creates a proxy to communicate to the specified service using the remoted interface TServiceInterface that 
            the service implements.
            <typeparam name="TServiceInterface">Interface that is being remoted</typeparam>
            <param name="serviceUri">Uri of the Service.</param>
            <param name="partitionKey">The Partition key that determines which service partition is responsible for handling requests from this service proxy</param>
            <param name="targetReplicaSelector">Determines which replica or instance of the service partition the client should connect to.</param>
            <param name="listenerName">This parameter is Optional if the service has a single communication listener. The endpoints from the service
            are of the form {"Endpoints":{"Listener1":"Endpoint1","Listener2":"Endpoint2" ...}}. When the service exposes multiple endpoints, this parameter
            identifies which of those endpoints to use for the remoting communication.
            </param>
            <returns>The proxy that implement the interface that is being remoted. The returned object also implement <see cref="T:Microsoft.ServiceFabric.Services.Remoting.Client.IServiceProxy"/> interface.</returns>
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V2.Client.ServiceProxyFactory.CreateServiceRemotingClientFactory(Microsoft.ServiceFabric.Services.Remoting.V2.Client.IServiceRemotingCallbackMessageHandler)">
            <summary>
            Creates service remoting client factory.
            </summary>
            <param name="callbackClient">Callback from the remoting listener to the client.</param>
            <returns>Created service remoting client factory as <see cref="T:Microsoft.ServiceFabric.Services.Remoting.V2.Client.IServiceRemotingClientFactory"/></returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.V2.Client.ServiceRemotingPartitionClient">
            <summary>
            Specifies the Service partition client for Remoting communication
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.V2.FabricTransport.Client.FabricTransportServiceRemotingClientFactory">
            <summary>
            An <see cref="T:Microsoft.ServiceFabric.Services.Remoting.V2.Client.IServiceRemotingClientFactory"/> that uses
            Fabric TCP transport to create <see cref="T:Microsoft.ServiceFabric.Services.Remoting.V2.Client.IServiceRemotingClient"/> that communicate with stateless
            and stateful services over interfaces that are remoted via 
            <see cref="T:Microsoft.ServiceFabric.Services.Remoting.V2.FabricTransport.Runtime.FabricTransportServiceRemotingListener"/>.
            </summary>
        </member>
        <member name="E:Microsoft.ServiceFabric.Services.Remoting.V2.FabricTransport.Client.FabricTransportServiceRemotingClientFactory.ClientConnected">
            <summary>
            Event handler that is fired when a client is connected to the service endpoint.
            </summary>
        </member>
        <member name="E:Microsoft.ServiceFabric.Services.Remoting.V2.FabricTransport.Client.FabricTransportServiceRemotingClientFactory.ClientDisconnected">
            <summary>
            Event handler that is fired when a client is disconnected from the service endpoint.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V2.FabricTransport.Client.FabricTransportServiceRemotingClientFactory.#ctor(Microsoft.ServiceFabric.Services.Remoting.FabricTransport.FabricTransportRemotingSettings,Microsoft.ServiceFabric.Services.Remoting.V2.Client.IServiceRemotingCallbackMessageHandler,Microsoft.ServiceFabric.Services.Client.IServicePartitionResolver,System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Services.Communication.Client.IExceptionHandler},System.String,Microsoft.ServiceFabric.Services.Remoting.V2.IServiceRemotingMessageSerializationProvider)">
            <summary>
                Constructs a fabric transport based service remoting client factory.
            </summary>
            <param name="remotingSettings">
                The settings for the fabric transport. If the settings are not provided or null, default settings 
                with no security.
            </param>
            <param name="remotingCallbackMessageHandler">
                The callback client that receives the callbacks from the service.
            </param>
            <param name="servicePartitionResolver">
                Service partition resolver to resolve the service endpoints. If not specified, a default 
                service partition resolver returned by <see cref="M:Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.GetDefault"/> is used.
            </param>
            <param name="exceptionHandlers">
                Exception handlers to handle the exceptions encountered in communicating with the service.
            </param>
            <param name="traceId">
                Id to use in diagnostics traces from this component.
            </param>
            <param name="serializationProvider">
            Serialization Provider to serialize and deserialize request and response.</param>
            <remarks>
                This factory uses an internal fabric transport exception handler to handle exceptions at the fabric TCP transport 
                level and a <see cref="T:Microsoft.ServiceFabric.Services.Remoting.Client.ServiceRemotingExceptionHandler"/>, in addition to the exception handlers supplied to the 
                constructor. 
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V2.FabricTransport.Client.FabricTransportServiceRemotingClientFactory.GetClientAsync(System.Uri,Microsoft.ServiceFabric.Services.Client.ServicePartitionKey,Microsoft.ServiceFabric.Services.Communication.Client.TargetReplicaSelector,System.String,Microsoft.ServiceFabric.Services.Communication.Client.OperationRetrySettings,System.Threading.CancellationToken)">
            <summary>
            Resolves a partition of the specified service containing one or more communication listeners and returns a client to communicate 
            to the endpoint corresponding to the given listenerName.
            The endpoint of the service is of the form - {"Endpoints":{"Listener1":"Endpoint1","Listener2":"Endpoint2" ...}}
            </summary>
            <param name="serviceUri">Uri of the service to resolve</param>
            <param name="partitionKey">Key that identifies the partition to resolve</param>
            <param name="targetReplicaSelector">Specifies which replica in the partition identified by the partition key, the client should connect to</param>
            <param name="listenerName">Specifies which listener in the endpoint of the chosen replica, to which the client should connect to</param>
            <param name="retrySettings">Specifies the retry policy that should be used for exceptions that occur when creating the client.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation. The result of the Task is
            the CommunicationClient(<see cref="T:Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClient" />) object.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V2.FabricTransport.Client.FabricTransportServiceRemotingClientFactory.GetClientAsync(System.Fabric.ResolvedServicePartition,Microsoft.ServiceFabric.Services.Communication.Client.TargetReplicaSelector,System.String,Microsoft.ServiceFabric.Services.Communication.Client.OperationRetrySettings,System.Threading.CancellationToken)">
            <summary>
            Re-resolves a partition of the specified service containing one or more communication listeners and returns a client to communicate 
            to the endpoint corresponding to the given listenerName.
            The endpoint of the service is of the form - {"Endpoints":{"Listener1":"Endpoint1","Listener2":"Endpoint2" ...}}
            </summary>
            <param name="previousRsp">Previous ResolvedServicePartition value</param>
            <param name="targetReplicaSelector">Specifies which replica in the partition identified by the partition key, the client should connect to</param>
            <param name="listenerName">Specifies which listener in the endpoint of the chosen replica, to which the client should connect to</param>
            <param name="retrySettings">Specifies the retry policy that should be used for exceptions that occur when creating the client.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation. The result of the Task is
            the CommunicationClient(<see cref="T:Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClient" />) object.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V2.FabricTransport.Client.FabricTransportServiceRemotingClientFactory.ReportOperationExceptionAsync(Microsoft.ServiceFabric.Services.Remoting.V2.Client.IServiceRemotingClient,Microsoft.ServiceFabric.Services.Communication.Client.ExceptionInformation,Microsoft.ServiceFabric.Services.Communication.Client.OperationRetrySettings,System.Threading.CancellationToken)">
            <summary>
            Handles the exceptions that occur in the CommunicationClient when sending a message to the Service
            </summary>
            <param name="client">Communication client</param>
            <param name="exceptionInformation">Information about exception that happened while communicating with the service.</param>
            <param name="retrySettings">Specifies the retry policy that should be used for handling the reported exception.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation. The result of the Task is
            a <see cref="T:Microsoft.ServiceFabric.Services.Communication.Client.OperationRetryControl" /> object that provides information on retry policy for this exception.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V2.FabricTransport.Client.FabricTransportServiceRemotingClientFactory.GetRemotingMessageBodyFactory">
            <summary>
             Gets the IServiceRemotingMessageBodyFactory used to create Remoting Request Body objects.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.V2.FabricTransport.Client.FabricTransportServiceRemotingClientFactoryImpl">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V2.FabricTransport.Client.FabricTransportServiceRemotingClientFactoryImpl.#ctor(Microsoft.ServiceFabric.Services.Remoting.V2.ServiceRemotingMessageSerializersManager,Microsoft.ServiceFabric.Services.Remoting.FabricTransport.FabricTransportRemotingSettings,Microsoft.ServiceFabric.Services.Remoting.V2.Client.IServiceRemotingCallbackMessageHandler,Microsoft.ServiceFabric.Services.Client.IServicePartitionResolver,System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Services.Communication.Client.IExceptionHandler},System.String)">
            <summary>
            
            </summary>
            <param name="remotingSettings"></param>
            <param name="remotingCallbackMessageHandler"></param>
            <param name="servicePartitionResolver"></param>
            <param name="exceptionHandlers"></param>
            <param name="traceId"></param>
            <param name="serializersManager"></param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V2.FabricTransport.Client.FabricTransportServiceRemotingClientFactoryImpl.ValidateClient(Microsoft.ServiceFabric.Services.Remoting.V2.FabricTransport.Client.FabricTransportServiceRemotingClient)">
            <summary>
            Returns true if the client is still valid. Connection oriented transports can use this method to indicate that the client is no longer
            connected to the service.
            </summary>
            <param name="remotingClient">the communication client</param>
            <returns>true if the client is valid, false otherwise</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V2.FabricTransport.Client.FabricTransportServiceRemotingClientFactoryImpl.ValidateClient(System.String,Microsoft.ServiceFabric.Services.Remoting.V2.FabricTransport.Client.FabricTransportServiceRemotingClient)">
            <summary>
            Returns true if the client is still valid and connected to the endpoint specified in the parameter.
            </summary>
            <param name="endpoint">Specifies the expected endpoint to which we think the client is connected to</param>
            <param name="remotingClient">the communication client</param>
            <returns>true if the client is valid, false otherwise</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V2.FabricTransport.Client.FabricTransportServiceRemotingClientFactoryImpl.CreateClientAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Creates a communication client for the given endpoint address.
            </summary>
            <param name="endpoint">listener address where the replica is listening</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>The communication client that was created</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V2.FabricTransport.Client.FabricTransportServiceRemotingClientFactoryImpl.AbortClient(Microsoft.ServiceFabric.Services.Remoting.V2.FabricTransport.Client.FabricTransportServiceRemotingClient)">
            <summary>
            Aborts the given client
            </summary>
            <param name="client">Communication client</param>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.V2.FabricTransport.Runtime.FabricTransportServiceRemotingListener">
            <summary>
                An <see cref="T:Microsoft.ServiceFabric.Services.Remoting.Runtime.IServiceRemotingListener"/> that uses
                fabric TCP transport to provide interface remoting for stateless and stateful services.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V2.FabricTransport.Runtime.FabricTransportServiceRemotingListener.#ctor(System.Fabric.ServiceContext,Microsoft.ServiceFabric.Services.Remoting.IService,Microsoft.ServiceFabric.Services.Remoting.FabricTransport.Runtime.FabricTransportRemotingListenerSettings,Microsoft.ServiceFabric.Services.Remoting.V2.IServiceRemotingMessageSerializationProvider)">
            <summary>
                Constructs a fabric transport based service remoting listener .
            </summary>
            <param name="serviceContext">
                The context of the service for which the remoting listener is being constructed. 
            </param>
            <param name="serviceImplementation">
                The service implementation object used to construct <see cref="T:Microsoft.ServiceFabric.Services.Remoting.V2.Runtime.ServiceRemotingMessageDispatcher"/>
                for message processing.
            </param>
            <param name="serializationProvider">It is used to serialize deserialize request and response body </param>
            <param name="remotingListenerSettings">The settings for the listener</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V2.FabricTransport.Runtime.FabricTransportServiceRemotingListener.#ctor(System.Fabric.ServiceContext,Microsoft.ServiceFabric.Services.Remoting.V2.Runtime.IServiceRemotingMessageHandler,Microsoft.ServiceFabric.Services.Remoting.FabricTransport.Runtime.FabricTransportRemotingListenerSettings,Microsoft.ServiceFabric.Services.Remoting.V2.IServiceRemotingMessageSerializationProvider)">
            <summary>
                Constructs a fabric transport based service remoting listener.
            </summary>
            <param name="serviceContext">
                The context of the service for which the remoting listener is being constructed.
            </param>
            <param name="serviceRemotingMessageHandler">
                The handler for processing remoting messages. As the messages are received,
                the listener delivers them to this handler.
            </param>
            <param name="serializationProvider">It is used to serialize deserialize request and response body </param>
            <param name="remotingListenerSettings">The settings for the listener</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V2.FabricTransport.Runtime.FabricTransportServiceRemotingListener.OpenAsync(System.Threading.CancellationToken)">
            <summary>
            This method causes the communication listener to be opened. Once the Open
            completes, the communication listener becomes usable - accepts and sends messages.
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation. The result of the Task is
            the endpoint string.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V2.FabricTransport.Runtime.FabricTransportServiceRemotingListener.CloseAsync(System.Threading.CancellationToken)">
            <summary>
            This method causes the communication listener to close. Close is a terminal state and 
            this method allows the communication listener to transition to this state in a
            graceful manner.
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V2.FabricTransport.Runtime.FabricTransportServiceRemotingListener.Abort">
            <summary>
            This method causes the communication listener to close. Close is a terminal state and
            this method causes the transition to close ungracefully. Any outstanding operations
            (including close) should be canceled when this method is called.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.V2.IServiceRemotingMessageBodyFactory">
            <summary>
            Defines the interface that must be implemented for providing factory for creating remtoing request body and response body objects.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V2.IServiceRemotingMessageBodyFactory.CreateRequest(System.String,System.String,System.Int32)">
            <summary>
            Creates a Remoting Request Body
            </summary>
            <param name="interfaceName"> This is FullName for the service interface for which request body is being constructed</param>
            <param name="methodName">MethodName for the service interface for which request will be sent to</param>
            <param name="numberOfParameters">Number of Parameters in that Method</param>
            <returns>IServiceRemotingRequestMessageBody</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V2.IServiceRemotingMessageBodyFactory.CreateResponse(System.String,System.String)">
             <summary>
             
            </summary> 
             <param name="interfaceName"> This is FullName for the service interface for which request body is being constructed</param>
             <param name="methodName">MethodName for the service interface for which request will be sent to</param>
             <returns>IServiceRemotingResponseMessageBody</returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.V2.IServiceRemotingMessageSerializationProvider">
            <summary>
            Defines the interface that must be implemented for providing custom serialization for the remoting request.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V2.IServiceRemotingMessageSerializationProvider.CreateMessageBodyFactory">
            <summary>
            Create a IServiceRemotingMessageBodyFactory used for creating remoting request and response body.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V2.IServiceRemotingMessageSerializationProvider.CreateRequestMessageSerializer(System.Type,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Creates IServiceRemotingRequestMessageBodySerializer for a serviceInterface .
            </summary>
            <param name="serviceInterfaceType">User service interface</param>
            <param name="requestBodyTypes">Parameters for all the methods in the serviceInterfaceType</param>
            <returns></returns>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V2.IServiceRemotingMessageSerializationProvider.CreateResponseMessageSerializer(System.Type,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
             Creates IServiceRemotingResponseMessageBodySerializer for a serviceInterface .
             </summary>
             <param name="serviceInterfaceType">User service interface</param>
             <param name="responseBodyTypes">Return Types for all the methods in the serviceInterfaceType</param>
             <returns></returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.V2.IServiceRemotingRequestMessage">
            <summary>
            Defines the interface that must be implemented for create Remoting Request Message.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V2.IServiceRemotingRequestMessage.GetHeader">
            <summary>
            Gets the Remoting Request Message Header
            </summary>
            <returns>IServiceRemotingRequestMessageHeader</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V2.IServiceRemotingRequestMessage.GetBody">
            <summary>
            Gets the Remoting Request Message Body </summary>
            <returns>IServiceRemotingRequestMessageBody</returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.V2.IServiceRemotingRequestMessageBody">
            <summary>
            Defines the interface that must be implemented to provide Request Message Body for remoting requests .
            This contains all the parameters remoting method has.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V2.IServiceRemotingRequestMessageBody.SetParameter(System.Int32,System.String,System.Object)">
            <summary>
            This Api gets called to set remoting Method Parameters before serializing/dispatching the request.
            </summary>
            <param name="position">Position of the parameter in Remoting Method.</param>
            <param name="parameName">Parameter Name in the Remoting Method</param>
            <param name="parameter">Parameter Value</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V2.IServiceRemotingRequestMessageBody.GetParameter(System.Int32,System.String,System.Type)">
            <summary>
            This is used to retrive Parameters from request Body Before dispatching to service remoting method.
            </summary>
            <param name="position">Position of the parameter in Remoting Method.</param>
            <param name="parameName">Parameter Name in the Remoting Method</param>
            <param name="paramType">Parameter Type</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.V2.IServiceRemotingRequestMessageBodySerializer">
            <summary>
            Defines the interface that must be implemented to provide a serializer/deserializer for remoting request message body.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V2.IServiceRemotingRequestMessageBodySerializer.Serialize(Microsoft.ServiceFabric.Services.Remoting.V2.IServiceRemotingRequestMessageBody)">
            <summary>
            Serializes IServiceRemotingRequestMessageBody to OutgoingMessageBody 
            </summary>
            <param name="serviceRemotingRequestMessageBody"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V2.IServiceRemotingRequestMessageBodySerializer.Deserialize(Microsoft.ServiceFabric.Services.Remoting.V2.Messaging.IncomingMessageBody)">
            <summary>
            Deserializes IncomingMessageBody to IServiceRemotingRequestMessageBody
            </summary>
            <param name="messageBody"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.V2.IServiceRemotingRequestMessageHeader">
            <summary>
            Specifies the headers that are sent along with a ServiceRemoting message.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Remoting.V2.IServiceRemotingRequestMessageHeader.MethodId">
            <summary>
            Gets or sets the methodId of the remote method.
            </summary>
            <value>The method id.</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Remoting.V2.IServiceRemotingRequestMessageHeader.InterfaceId">
            <summary>
            Gets or sets the interface id of the remote interface.
            </summary>
            <value>The interface id.</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Remoting.V2.IServiceRemotingRequestMessageHeader.InvocationId">
            <summary>
            Gets or sets the identifier for the remote method invocation.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V2.IServiceRemotingRequestMessageHeader.AddHeader(System.String,System.Byte[])">
            <summary>
            Adds a new header with the specified name and value.
            </summary>
            <param name="headerName">The header Name.</param>
            <param name="headerValue">The header value.</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V2.IServiceRemotingRequestMessageHeader.TryGetHeaderValue(System.String,System.Byte[]@)">
            <summary>
            Gets the header with the specified name.
            </summary>
            <param name="headerName">The header Name.</param>
            <param name="headerValue">The header value.</param>
            <returns>true if a header with that name exists; otherwise, false.</returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.V2.IServiceRemotingResponseMessage">
            <summary>
            Defines an interface that must be implemented to provide  a remoting response message for remoting Api.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V2.IServiceRemotingResponseMessage.GetHeader">
            <summary>
            Gets the Response Message Header.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V2.IServiceRemotingResponseMessage.GetBody">
            <summary>
            Gets the Response Message Body.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.V2.IServiceRemotingResponseMessageBody">
            <summary>
            Defines the interface that must be implemented to provide Response Message Body for remoting requests .
            This contains the return Type of a remoting Method.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V2.IServiceRemotingResponseMessageBody.Set(System.Object)">
            <summary>
            Sets the response of a remoting Method in a remoting response Body
            </summary>
            <param name="response">Remoting Method Response</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V2.IServiceRemotingResponseMessageBody.Get(System.Type)">
            <summary>
            Gets the response of a remoting Method from a remoting response body before sending it to Client. 
            </summary>
            <param name="paramType"> Return Type of a Remoting Method</param>
            <returns>Remoting Method Response</returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.V2.IServiceRemotingResponseMessageBodySerializer">
            <summary>
            Defines an interface that must be implemented to provide a serializer for Remoting Response Body
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V2.IServiceRemotingResponseMessageBodySerializer.Serialize(Microsoft.ServiceFabric.Services.Remoting.V2.IServiceRemotingResponseMessageBody)">
            <summary>
            Serialize the Remoting Response Body before sending message over the wire.
            </summary>
            <param name="serviceRemotingRequestMessageBody"></param>
            <returns>OutgoingMessageBody</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V2.IServiceRemotingResponseMessageBodySerializer.Deserialize(Microsoft.ServiceFabric.Services.Remoting.V2.Messaging.IncomingMessageBody)">
            <summary>
            Deserialize the incoming Message to a Remoting ResponseMessageBody before sending it to Client Api
            </summary>
            <param name="messageBody">serialized Message</param>
            <returns>IServiceRemotingResponseMessageBody</returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.V2.IServiceRemotingResponseMessageHeader">
            <summary>
            Defines an interfaces that must be implemented to provide header for remoting response message.
            
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V2.IServiceRemotingResponseMessageHeader.AddHeader(System.String,System.Byte[])">
            <summary>
            Adds a new header with the specified name and value.
            </summary>
            <param name="headerName">The header Name.</param>
            <param name="headerValue">The header value.</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V2.IServiceRemotingResponseMessageHeader.TryGetHeaderValue(System.String,System.Byte[]@)">
            <summary>
            Gets the header with the specified name.
            </summary>
            <param name="headerName">The header Name.</param>
            <param name="headerValue">The header value.</param>
            <returns>true if a header with that name exists; otherwise, false.</returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.V2.Messaging.BufferPoolManager">
            <summary>
            You can use the BufferManager class to manage a buffer pool. 
            The pool is created when you instantiate this class . Buffer is instantiated when there are no unused buffers in the pool.
            Destroyed when the buffer pool is reclaimed by garbage collection. 
            Every time you need to use a buffer, you take one from the pool, use it, and return it to the pool when done. 
            This process is much faster than creating and destroying a buffer every time you need to use one.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V2.Messaging.BufferPoolManager.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the BufferPoolManager class.
            </summary>
            <param name="segmentSize"></param>
            <param name="bufferLimit"></param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V2.Messaging.BufferPoolManager.TakeBuffer">
            <summary>
            Gets a buffer from the pool.
            if it doesn't find any unused buffer , it instantiate new buffer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V2.Messaging.BufferPoolManager.ReturnBuffer(Microsoft.ServiceFabric.Services.Remoting.V2.Messaging.IPooledBuffer)">
            <summary>
            Returns a buffer to the pool.
            if limit crosses, buffer won't be returned to the Pool.
            It return false , if buffer is not returned.
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.V2.Messaging.IBufferPoolManager">
            <summary>
            Defines the interface that represents the IBufferPoolManager class.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V2.Messaging.IBufferPoolManager.TakeBuffer">
            <summary>
            Gets the Buffer from the Pool.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V2.Messaging.IBufferPoolManager.ReturnBuffer(Microsoft.ServiceFabric.Services.Remoting.V2.Messaging.IPooledBuffer)">
            <summary>
            Return the Buffer to the Pool.
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.V2.Messaging.IMessageBody">
            <summary>
            Defines an interface that must be implemented to provide message body for the serialized Message.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V2.Messaging.IMessageBody.GetSendBuffers">
            <summary>
            Gets the Send Buffers 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V2.Messaging.IMessageBody.GetReceivedBuffer">
            <summary>
            Get the Received Stream
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.V2.Messaging.IncomingMessageBody">
            <summary>
            Serialized Message Body received from an incoming connection.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V2.Messaging.IncomingMessageBody.#ctor(System.IO.Stream)">
            <summary>
            Creates an incoming Message Body with the received stream .
            </summary>
            <param name="receivedBufferStream"></param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V2.Messaging.IncomingMessageBody.GetSendBuffers">
            <summary>
            This is not used for this implementation
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V2.Messaging.IncomingMessageBody.GetReceivedBuffer">
            <summary>
            Return the Received Buffer Stream 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V2.Messaging.IncomingMessageBody.Dispose">
            <summary>
            Dispose the Received Buffer stream 
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.V2.Messaging.IPooledBuffer">
            <summary>
            Defines the interface that represents the IPooledBuffer class.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Remoting.V2.Messaging.IPooledBuffer.Value">
            <summary>
            Gets the Value of the buffer.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Remoting.V2.Messaging.IPooledBuffer.ContentLength">
            <summary>
            Gets or sets the length of the buffer used.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V2.Messaging.IPooledBuffer.Release">
            <summary>
            Release the buffer to the Pool.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.V2.Messaging.OutgoingMessageBody">
            <summary>
            Represents the outgoing message body to be sent over the wire.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V2.Messaging.OutgoingMessageBody.#ctor(System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Services.Remoting.V2.Messaging.IPooledBuffer})">
            <summary>
            Creates OutgoingMessageBody with list of pooled Buffers
            </summary>
            <param name="outgoingPooledBodyBuffers"></param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V2.Messaging.OutgoingMessageBody.#ctor(System.Collections.Generic.IEnumerable{System.ArraySegment{System.Byte}})">
            <summary>
            Creates OutgoingMessageBody with list of segments.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V2.Messaging.OutgoingMessageBody.GetSendBuffers">
            <summary>
            Returns the Buffers to be sent over the wire.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V2.Messaging.OutgoingMessageBody.GetReceivedBuffer">
            <summary>
            This method is not implemented.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V2.Messaging.OutgoingMessageBody.Dispose">
            <summary>
            Release the pooled Buffers if it has any.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.V2.RemoteException">
            <summary>
            Fault type used by Service Remoting to transfer the exception details from the Service Replica to the client.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Remoting.V2.RemoteException.Data">
            <summary>
            Serialized exception or the exception message encoded as UTF8 if the exception cannot be serialized.
            </summary>
            <value>Data in the exception</value>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V2.RemoteException.FromException(System.Exception)">
            <summary>
            Factory method that constructs the RemoteException from an exception.
            </summary>
            <param name="exception">Exception</param>
            <returns>RemoteException</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V2.RemoteException.ToException(System.IO.Stream,System.Exception@)">
            <summary>
            Gets the exception from the RemoteException
            </summary>
            <param name="messageBuffer"></param>
            <param name="result">Exception from the remote side</param>
            <returns>true if there was a valid exception, false otherwise</returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.V2.Runtime.IServiceRemotingCallbackClient">
            <summary>
            Defines the interface that must be implemented for providing callback mechanism from the remoting listener to the client.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V2.Runtime.IServiceRemotingCallbackClient.SendOneWay(Microsoft.ServiceFabric.Services.Remoting.V2.IServiceRemotingRequestMessage)">
            <summary>
            Sends a one way message to the client.
            </summary>
            <param name="requestMessage">The remoting request message.</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V2.Runtime.IServiceRemotingCallbackClient.GetRemotingMessageBodyFactory">
            <summary>
            Returns the IServiceRemotingMessageBodyFactory . It is used by CallBackClient to create Remoting Request Body
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.V2.Runtime.IServiceRemotingMessageHandler">
            <summary>
            Defines the interface that must be implemented by the ServiceRemotingListener to receive messages from the
            remoting transport.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V2.Runtime.IServiceRemotingMessageHandler.HandleRequestResponseAsync(Microsoft.ServiceFabric.Services.Remoting.V2.Runtime.IServiceRemotingRequestContext,Microsoft.ServiceFabric.Services.Remoting.V2.IServiceRemotingRequestMessage)">
            <summary>
            Handles a message from the client that requires a response from the service.
            </summary>
            <param name="requestContext">Contains additional information about the request.</param>
            <param name="requestMessage">The request message.</param>
            <returns>The response body.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V2.Runtime.IServiceRemotingMessageHandler.HandleOneWayMessage(Microsoft.ServiceFabric.Services.Remoting.V2.IServiceRemotingRequestMessage)">
            <summary>
            Handles a one way message from the client.
            </summary>
            <param name="requestMessage">The request message</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V2.Runtime.IServiceRemotingMessageHandler.GetRemotingMessageBodyFactory">
            <summary>
            Returns the IServiceRemotingMessageBodyFactory . It is used by Dispatcher to create Remoting Response Body
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.V2.Runtime.IServiceRemotingRequestContext">
            <summary>
            Defines the interface that must be implemented to provide the request context for the IServiceRemotingMessageHandler.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V2.Runtime.IServiceRemotingRequestContext.GetCallBackClient">
            <summary>
            Retrieves the client channel interface to use in cases where service wants to initiate calls to the client.
            </summary>
            <returns>The remoting callback client.</returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.V2.Runtime.ServiceRemotingMessageDispatcher">
            <summary>
            Provides an implementation of <see cref="T:Microsoft.ServiceFabric.Services.Remoting.V2.Runtime.IServiceRemotingMessageHandler"/> that can dispatch
            messages to the service implementing <see cref="T:Microsoft.ServiceFabric.Services.Remoting.IService"/> interface.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V2.Runtime.ServiceRemotingMessageDispatcher.#ctor(System.Collections.Generic.IEnumerable{System.Type},System.Fabric.ServiceContext,System.Object,Microsoft.ServiceFabric.Services.Remoting.V2.IServiceRemotingMessageBodyFactory)">
            <summary>
            Instantiates the ServiceRemotingDispatcher that uses the given service context and
            dispatches messages to the given service implementation.
            This dispatcher can be used to dispatch request to the specified Remoting types.
            </summary>
            <param name="remotingTypes">Types to which you can dispatch request to  </param>
            <param name="serviceContext">Service context</param>
            <param name="serviceImplementation">Service implementation that implements specified remoting interfaces</param>
            <param name="serviceRemotingMessageBodyFactory"></param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V2.Runtime.ServiceRemotingMessageDispatcher.#ctor(System.Fabric.ServiceContext,Microsoft.ServiceFabric.Services.Remoting.IService,Microsoft.ServiceFabric.Services.Remoting.V2.IServiceRemotingMessageBodyFactory)">
            <summary>
            Instantiates the ServiceRemotingDispatcher that uses the given service context and
            dispatches messages to the given service implementation.
            </summary>
            <param name="serviceContext">Service context</param>
            <param name="serviceImplementation">Service implementation that implements interfaces of type <see cref="T:Microsoft.ServiceFabric.Services.Remoting.IService"/></param>
            <param name="serviceRemotingMessageBodyFactory">This is the factory used by Dispatcher to create Remoting Response object</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V2.Runtime.ServiceRemotingMessageDispatcher.HandleRequestResponseAsync(Microsoft.ServiceFabric.Services.Remoting.V2.ServiceRemotingDispatchHeaders,Microsoft.ServiceFabric.Services.Remoting.V2.IServiceRemotingRequestMessageBody,System.Threading.CancellationToken)">
            <summary>
            Handles a message from the client that requires a response from the service. This Api can be used for the short-circuiting where client is in same process as service.
            Client can now directly dispatch request to service instead of using ServiceProxy.
            </summary>
            <param name="requestMessageDispatchHeaders">Request message headers</param>
            <param name="requestMessageBody">Request message body</param>
            <param name="cancellationToken">Cancellation token. It can be used to cancel the request</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V2.Runtime.ServiceRemotingMessageDispatcher.HandleRequestResponseAsync(Microsoft.ServiceFabric.Services.Remoting.V2.Runtime.IServiceRemotingRequestContext,Microsoft.ServiceFabric.Services.Remoting.V2.IServiceRemotingRequestMessage)">
            <summary>
            Handles a message from the client that requires a response from the service.
            </summary>
            <param name="requestContext">Request context - contains additional information about the request</param>
            <param name="requestMessage">Request message</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V2.Runtime.ServiceRemotingMessageDispatcher.HandleOneWayMessage(Microsoft.ServiceFabric.Services.Remoting.V2.IServiceRemotingRequestMessage)">
            <summary>
            Handles a one way message from the client.
            </summary>
            <param name="requestMessage">Request message</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V2.Runtime.ServiceRemotingMessageDispatcher.GetRemotingMessageBodyFactory">
            <summary>
            Returns a IServiceRemotingMessageBodyFactory used to create Remoting Response objects.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V2.Runtime.ServiceRemotingMessageDispatcher.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.V2.ServiceRemotingDataContractSerializationProvider">
            <summary>
            This is the default implmentation  for <see cref="T:Microsoft.ServiceFabric.Services.Remoting.V2.IServiceRemotingMessageSerializationProvider"/>used by remoting service and client during
            request/response serialization . It used DataContract for serialization.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V2.ServiceRemotingDataContractSerializationProvider.#ctor">
            <summary>
            Creates a ServiceRemotingDataContractSerializationProvider with default IBufferPoolManager 
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V2.ServiceRemotingDataContractSerializationProvider.#ctor(Microsoft.ServiceFabric.Services.Remoting.V2.Messaging.IBufferPoolManager)">
            <summary>
            Creates a ServiceRemotingDataContractSerializationProvider with user specified IBufferPoolManager
            </summary>
            <param name="bodyBufferPoolManager"></param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V2.ServiceRemotingDataContractSerializationProvider.CreateRequestMessageSerializer(System.Type,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Creates IServiceRemotingRequestMessageBodySerializer for a serviceInterface using DataContract implementation
            </summary>
            <param name="serviceInterfaceType">User service interface</param>
            <param name="requestBodyTypes">Parameters for all the methods in the serviceInterfaceType</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V2.ServiceRemotingDataContractSerializationProvider.CreateResponseMessageSerializer(System.Type,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Creates IServiceRemotingResponseMessageBodySerializer for a serviceInterface using DataContract implementation
            </summary>
            <param name="serviceInterfaceType">User service interface</param>
            <param name="responseBodyTypes">Return Types for all the methods in the serviceInterfaceType</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V2.ServiceRemotingDataContractSerializationProvider.CreateMessageBodyFactory">
            <summary>
            Creates a MessageFactory for DataContract Remoting Types. This is used to create Remoting Request/Response objects.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.V2.ServiceRemotingDispatchHeaders">
            <summary>
            Specifies the headers that are sent along with a ServiceRemoting message. This class is used with Service Independent Dispatcher <see cref="T:Microsoft.ServiceFabric.Services.Remoting.V2.Runtime.ServiceRemotingMessageDispatcher"/> 
            .e.g Short-Circuiting (Where client and service are in same process)
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Remoting.V2.ServiceRemotingDispatchHeaders.ServiceInterfaceName">
            <summary>
            This is the Full Name for the user remoting service interface.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Remoting.V2.ServiceRemotingDispatchHeaders.MethodName">
            <summary>
            This is the Method Name to which the request will be sent to .
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Remoting.V2.ServiceRemotingRequestMessageHeader.MethodId">
            <summary>
            The methodId of the remote method
            </summary>
            <value>Method id</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Remoting.V2.ServiceRemotingRequestMessageHeader.InterfaceId">
            <summary>
            The interface id of the remote interface.
            </summary>
            <value>Interface id</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Remoting.V2.ServiceRemotingRequestMessageHeader.InvocationId">
            <summary>
            Identifier for the remote method invocation
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V2.ServiceRemotingRequestMessageHeader.#ctor">
            <summary>
            Instantiates a new instance of the ServiceRemotingRequestMessageHeader
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.V2.ServiceRemotingResponseMessageHeader.#ctor">
            <summary>
            Instantiates a new instance of the ServiceRemotingResponseMessageHeader
            </summary>
        </member>
    </members>
</doc>
